<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.InformationProtection</name>
    </assembly>
    <members>
        <member name="T:Microsoft.InformationProtection.Internal.Actions.ActionsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.Attachments.AttachmentsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.Buffer.BufferEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.ClassificationRequests.ClassificationRequestsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.ClassificationResults.ClassificationResultsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.ContentLabels.ContentLabelsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.DelegationLicenses.DelegationLicensesEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.DetailedClassificationResults.DetailedClassificationResultsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.EventProperties.EventPropertiesEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.FeatureDictionary.FeatureDictionaryEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.FunctionalityFilterTypesList.FunctionalityFilterTypesListEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.FunctionalityFilterTypesMap.FunctionalityFilterTypesMapEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.Labels.LabelsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.LicenseApplicationDataList.LicenseApplicationDataListEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.LicenseNameAndDescriptionItems.LicenseNameAndDescriptionItemsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.MetadataEntryList.MetadataEntryListEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.Properties.PropertiesEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.SensitivityTypesRulePackages.SensitivityTypesRulePackagesEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.StringDictionary.StringDictionaryEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.StringListDictionary.StringListDictionaryEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.Strings.StringsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.StringsList.StringsListEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.TemplateDescriptors.TemplateDescriptorsEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.UserRightsList.UserRightsListEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.Internal.UserRolesList.UserRolesListEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:Microsoft.InformationProtection.ActionSource">
            <summary>
            Defines what initiated the SetLabel event
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ActionSource.Manual">
            <summary>
            Selected manually by user
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ActionSource.Automatic">
            <summary>
            Set by policy conditions
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ActionSource.Recommended">
            <summary>
            Set by user after label was recommended by policy conditions
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ActionSource.Default">
            <summary>
            Set by default in policy
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.AddingEngineEventArgs">
            <summary>
            Event used to notify that an "AddEngine" operation is starting
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.AddingEngineEventArgs.RequiresPolicyFetch">
            <summary>
            Whether or not engine data must be fetched via HTTP or if it will be loaded from cache
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.ApplicationInfo">
            <summary>
            Application identifier as set in the aad portal.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ApplicationInfo.ApplicationId">
            <summary>
            The Application Id
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ApplicationInfo.ApplicationName">
            <summary>
            Friendly name for the application
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ApplicationInfo.ApplicationVersion">
            <summary>
            Version of the application
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.AssignmentMethod">
            <summary>
            The assignment method of the label on the document. Whether the Assignment of the label was done  automatically,
            standard or as a privileged operation(The equivalent to an administrator operation). 
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.AssignmentMethod.Standard">
            <summary>
            Label assignment method is standard
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.AssignmentMethod.Privileged">
            <summary>
            Label assignment method is privileged
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.AssignmentMethod.Auto">
            <summary>
            Label assignment method is automatic
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.AuditEvent">
            <summary>
            The class representing MIP SDK audit.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.AuditEvent.#ctor(System.String,Microsoft.InformationProtection.EventLevel,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.InformationProtection.EventProperty})">
            <summary>
            Constructor for AuditEvent
            </summary>
            <param name="name">The email</param>
            <param name="level">The name</param>
            <param name="startTime">The name</param>
            <param name="properties">The name</param>
        </member>
        <member name="T:Microsoft.InformationProtection.CacheStorageType">
            <summary>
            Type of Storage to use for caching
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.CacheStorageType.InMemory">
            <summary>
            Use In Memory storage
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.CacheStorageType.OnDisk">
            <summary>
            Use On Disk storage
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.CacheStorageType.OnDiskEncrypted">
            <summary>
            Use On Disk storage with encryption (if supported by the platform)
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Label">
            <summary>
            Abstraction for a single Microsoft Information Protection label.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Label.#ctor(System.String,Microsoft.InformationProtection.ActionSource)">
            <summary>
            Constructor for Label
            </summary>
            <param name="id">The label Id</param>
            <param name="actionSource">The action source of the label</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Id">
            <summary>
            The label Id
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Name">
            <summary>
            The label name
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Description">
            <summary>
            The label description
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Color">
            <summary>
            The color the label should be displayed, in the format "#RRGGBB" where each of RR, GG, BB is a hexadecimal 0-f
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Sensitivity">
            <summary>
            Sensitivity of the label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Tooltip">
            <summary>
            The tooltip description of the label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.AutoTooltip">
            <summary>
            The tooltip description of the classification that caused the label to appear.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.IsActive">
            <summary>
            If the label is active.
            </summary>
            <remarks>Only active labels can be applied. Inactive labels cannot be applied, and are used for display purposes only.</remarks>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.ActionSource">
            <summary>
             Gets the action source of the label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Parent">
            <summary>
            The parent of the current label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.Children">
            <summary>
            The children labels of the current label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.CustomSettings">
            <summary>
             The custom label settings. set by the tenant admin.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Label.ContentFormats">
            <summary>
            The content formats supported by the label
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.LicenseType">
            <summary>
            License type to create a specialized license
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.LicenseType.DoNotForward">
            <summary>
            Defines a do not forward license type
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.LicenseType.EncryptOnly">
            <summary>
            Defines an encrypt only license type
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.ContentLabel">
            <summary>
            Abstraction for a Microsoft Information Protection label that is applied to a piece of content, typically a document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.ContentLabel.#ctor(Microsoft.InformationProtection.Label,System.DateTime,Microsoft.InformationProtection.AssignmentMethod,System.Boolean)">
            <summary>
            Constructor for ContentLabel
            </summary>
            <param name="label">The actual label object applied on the content</param>
            <param name="creationTime">The creation time of the label</param>
            <param name="assignmentMethod">The assignment method of the label</param>
            <param name="isProtectionAppliedFromLabel">Whether protection was applied by the label</param>
        </member>
        <member name="P:Microsoft.InformationProtection.ContentLabel.Label">
            <summary>
            The actual label object applied on the content.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ContentLabel.CreationTime">
            <summary>
            The creation time of the label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ContentLabel.AssignmentMethod">
            <summary>
            The assignment method of the label. 
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ContentLabel.IsProtectionAppliedFromLabel">
            <summary>
            Returns true if protection was applied by the label or not.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Cloud">
            <summary>
            Azure cloud identifier
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.Unknown">
            <summary>
            Cloud not specified or URL not recognized as an Azure cloud
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.Custom">
            <summary>
            Custom cloud: endpoint base URL manually specified by applicatio
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.Test">
            <summary>
            Test cloud
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.Commercial">
            <summary>
            Global commerical cloud
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.Germany">
            <summary>
            Germany sovereign cloud
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.US_DoD">
            <summary>
            US sovereign cloud (DoD)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.US_GCC">
            <summary>
            US sovereign cloud (GCC)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.US_GCC_High">
            <summary>
            US sovereign cloud (GCC-High)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.US_Sec">
            <summary>
            US sovereign cloud (Sec)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.US_Nat">
            <summary>
            US sovereign cloud (Nat)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Cloud.China_01">
            <summary>
            China sovereign cloud
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Consent">
            <summary>
            Level of consent a user gives to access an external URL
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Consent.AcceptAlways">
            <summary>
            Accept for this request and all future requests for the same URL
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Consent.Accept">
            <summary>
            Accept only for this request
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Consent.Reject">
            <summary>
            Reject only for this request
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.DataState">
            <summary>
            Defines what is the state of the content being acted upon 
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.DataState.Rest">
            <summary>
            Inactive data stored physically in databases/file/warehouses etc.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.DataState.Motion">
            <summary>
            Data traversing a network or temporarily residing in computer memory to be read or updated
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.DataState.Use">
            <summary>
            Active data under constant change stored physically in databases/file/warehouses etc
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.DiagnosticConfiguration">
            <summary>
            Represents custom telemetry settings
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.IsNetworkDetectionEnabled">
            <summary>
            Is network status checked on a background thread
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.IsLocalCachingEnabled">
            <summary>
            Is local caching/logging permitted for telemetry/audit component
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.IsTraceLoggingEnabled">
            <summary>
            Is on-disk trace logging enabled for telemetry/audit component
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.IsMinimalTelemetryEnabled">
            <summary>
            Is non-critical telemetry disabled
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.IsFastShutdownEnabled">
            <summary>
            Is telemetry fast shutdown enabled or not
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.CustomSettings">
            <summary>
            Custom settings of telemetry
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.MaskedProperties">
            <summary>
            Telemetry events/properties which should be masked
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.AuditDelegate">
            <summary>
            Delegate override to write audit events
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.DiagnosticConfiguration.TelemetryDelegate">
            <summary>
            Delegate override to write telemetry events
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Pii">
            <summary>
            Type of PII data, if any.
            If an event is sent through audit pipeline, this value should be forced to 'None'.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Pii.None">
            <summary>
            Data is not PII
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Pii.SmtpAddress">
            <summary>
            Data contains an SMTP address
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Pii.Identity">
            <summary>
            Data contains an identity
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Pii.Uri">
            <summary>
            Data contains a URI
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Pii.Fqdn">
            <summary>
            Data contains a FQDN
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.EventLevel">
            <summary>
            Description of event importance
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EventLevel.Basic">
            <summary>
            Data is used only for telemetry/logging purposes
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EventLevel.NecessaryServiceData">
            <summary>
            Data is necessary as a critical feature (e.g. audit)
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.EventPropertyType">
            <summary>
            Underlying event property data type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EventPropertyType.Double">
            <summary>
            double
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EventPropertyType.Int64">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EventPropertyType.String">
            <summary>
            string
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Event">
            <summary>
            The class representing MIP SDK event.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Event.Name">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Event.Level">
            <summary>
            The level of event, indicating whether it is considered necessary service data (NSD) or not.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Event.StartTime">
            <summary>
            The event start time.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Event.Properties">
            <summary>
            All event properties.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Event.#ctor(System.String,Microsoft.InformationProtection.EventLevel,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.InformationProtection.EventProperty})">
            <summary>
            Constructor for Event
            </summary>
            <param name="name">The email</param>
            <param name="level">The name</param>
            <param name="startTime">The name</param>
            <param name="properties">The name</param>
        </member>
        <member name="T:Microsoft.InformationProtection.EventProperty">
            <summary>
            The interface to the MIP SDK audit.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.EventProperty.PropertyType">
            <summary>
            The underlying data type for this property.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.EventProperty.IsAuditOnly">
            <summary>
            Whether or not this property is restricted to the audit pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.EventProperty.Name">
            <summary>
            The name of property.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.EventProperty.Pii">
            <summary>
            Personally-identifiable information (PII) classification, if any.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.EventProperty.Value">
            <summary>
            Property value of PropertyType.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.EventProperty.#ctor(Microsoft.InformationProtection.EventPropertyType,System.String,Microsoft.InformationProtection.Pii,System.Object,System.Boolean)">
            <summary>
            Constructor for EventProperty
            </summary>
            <param name="propertyType">data type for the property</param>
            <param name="name">The name of property</param>
            <param name="pii">Personally-identifiable information (PII) classification</param>
            <param name="value">The value of the property</param>
            <param name="isAuditOnly">Flag to represent if its restricted to audit pipeline</param>
        </member>
        <member name="T:Microsoft.InformationProtection.FlightingFeature">
            <summary>
            Defines configurable features by name
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.ServiceDiscovery">
            <summary>
            Rely on separate HTTP call to determine RMS service endpoints. Default disabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.AuthInfoCache">
            <summary>
            Cache OAuth2 challenges per domain/tenant to reduce unnecessary 401 responses. Disable for apps/services that manage their own HTTP auth (like SPO, Edge). Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.LinuxEncryptedCache">
            <summary>
            Enable encrypted caching for Linux platforms (Please read the prerequisites for this feature). Default disabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.SingleDomainName">
            <summary>
            Enable single company name for dns lookup. e.g. https://corprights. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.PolicyAuth">
            <summary>
            Enable automatic HTTP authentication for requests sent to Policy service. Disable for apps/services that manage their own HTTP auth (like SPO, Edge). Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.UrlRedirectCache">
            <summary>
            Cache URL redirects to reduce number of HTTP operations. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.PreLicensing">
            <summary>
            Enable pre license api check. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.DoubleKey">
            <summary>
            Enable double key protection feature to use a customer key to encrypt with. Default disabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.VariablePolicyTtl">
            <summary>
            Enable variable policy time to live, disabling reverts to infinite policy. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.VariableTextMarking">
            <summary>
            Enable variable text marking. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.OptimizePdfMemory">
            <summary>
            Enable Optimize Pdf Memory Creator in protect and unprotect PDF files. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.RemoveDeletedLabelMd">
            <summary>
            Enable removing delete label's meta data. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.EnforceTls12">
            <summary>
            Enforce TLS 1.2 for non-ADRMS HTTPS connections. Default enabled.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.EncryptedDatabaseIntegrityChecking">
            <summary>
            Enable database integrity checking
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FlightingFeature.FipsValidatedCryptography">
            <summary>
            Enable the use of the FIPS-validated Windows CNG APIs instead of OpenSSL on Windows platforms
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.AccessDeniedException">
            <summary>
            The exception thrown when the user could not get access to services.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.AccessDeniedException.#ctor(System.String)">
            <summary>
            Constructor for AccessDeniedException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.AdhocProtectionRequiredException">
            <summary>
            The exception thrown when Adhoc protection should be set to complete the action on the file.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.AdhocProtectionRequiredException.#ctor(System.String)">
            <summary>
            Constructor for AdhocProtectionRequiredException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.BadInputException">
            <summary>
            The exception thrown when the caller passed bad input.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Exceptions.BadInputException.ErrorCode">
            <summary>
            Gets the category of bad input failure.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.BadInputException.#ctor(System.String)">
            <summary>
            Constructor for BadInputException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.BadInputException.#ctor(System.String,Microsoft.InformationProtection.BadInputErrorCode)">
            <summary>
            Constructor for BadInputException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="errorCode">Category of bad input error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.ConsentDeniedException">
            <summary>
            An operation that required consent from user was not granted consent.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.ConsentDeniedException.#ctor(System.String)">
            <summary>
            Constructor for ConsentDeniedException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.ContentFormatNotSupportedException">
            <summary>
            Content format is not supported
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.ContentFormatNotSupportedException.#ctor(System.String)">
            <summary>
            Constructor for ContentFormatNotSupportedException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.CustomerKeyUnavailableException">
            <summary>
            Customer BYOKey is not available for content access
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.CustomerKeyUnavailableException.#ctor(System.String)">
            <summary>
            Constructor for CustomerKeyUnavailableException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.DelegateResponseException">
            <summary>
            The exception thrown for general delegate implementation issue
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.DelegateResponseException.#ctor(System.String)">
            <summary>
            Constructor for DelegateResponseException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Exceptions.DelegateResponseException.DebugInfo">
            <summary>
            Debug information associated with the delegate response exception such as
            a stack trace of the original exception if available.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.DeprecatedApiException">
            <summary>
            Caller invoked a deprecated API.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.DeprecatedApiException.#ctor(System.String)">
            <summary>
            Constructor for DeprecatedApiException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.FileIOException">
            <summary>
            General File IO error.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.FileIOException.#ctor(System.String)">
            <summary>
            Constructor for FileIOException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.InsufficientBufferException">
            <summary>
            Buffer is too small
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.InsufficientBufferException.#ctor(System.String)">
            <summary>
            Constructor for InsufficientBufferException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.InternalException">
            <summary>
            The exception thrown for internal unexpected errors.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.InternalException.#ctor(System.String)">
            <summary>
            Constructor for InternalException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.JustificationRequiredException">
            <summary>
            The exception thrown when justification should be provided to complete the action on the file.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.JustificationRequiredException.#ctor(System.String)">
            <summary>
            Constructor for JustificationRequiredException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.LabelDisabledException">
            <summary>
            Label is disabled or inactive
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.LabelDisabledException.#ctor(System.String)">
            <summary>
            Constructor for LabelDisabledException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.LabelNotFoundException">
            <summary>
            Label ID is not recognized
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.LabelNotFoundException.#ctor(System.String)">
            <summary>
            Constructor for LabelNotFoundException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.LicenseNotRegisteredException">
            <summary>
            Publishing License not Registered
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.LicenseNotRegisteredException.#ctor(System.String)">
            <summary>
            Constructor for LicenseNotRegisteredException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.NetworkException">
            <summary>
            The exception thrown for general network issues; for example, unreachable service.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Exceptions.NetworkException.Category">
            <summary>
            Gets the category of network failure.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Exceptions.NetworkException.ResponseStatusCode">
            <summary>
            HTTP response status code, 0 if none.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.NetworkException.#ctor(Microsoft.InformationProtection.NetworkExceptionCategory,System.Int32,System.String)">
            <summary>
            Constructor for NetworkException
            </summary>
            <param name="category">The category of network failure</param>
            <param name="statusCode">HTTP response status code, 0 if none</param>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.NoAuthTokenException">
            <summary>
            The exception thrown when the user could not get access to the content due to an empty auth token.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.NoAuthTokenException.#ctor(System.String)">
            <summary>
            Constructor for NoAuthTokenException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.NoPermissionsException">
            <summary>
            The exception thrown when the user could not get access to the content. For example, no permissions, content revoked.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Exceptions.NoPermissionsException.Referrer">
            <summary>
            The contact in case of missing rights to the document.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Exceptions.NoPermissionsException.Owner">
            <summary>
            The owner of the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.NoPermissionsException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for NoPermissionsException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="referrer">The contact in case of missing rights to the document</param>
            <param name="owner">The owner of the document</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.NoPolicyException">
            <summary>
            The exception thrown when no policy is configured for user/tenant.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.NoPolicyException.#ctor(System.String)">
            <summary>
            Constructor for NoPolicyException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.NotSupportedOperationException">
            <summary>
            The operation requested by the application is not supported by the SDK.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.NotSupportedOperationException.#ctor(System.String)">
            <summary>
            Constructor for NotSupportedOperationException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.OperationCancelledException">
            <summary>
            The operation was cancelled
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.OperationCancelledException.#ctor(System.String)">
            <summary>
            Constructor for OperationCancelledException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.PrivilegedRequiredException">
            <summary>
            The exception thrown when cannot override privileged label when new label method is standard
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.PrivilegedRequiredException.#ctor(System.String)">
            <summary>
            Constructor for PrivilegedRequiredException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.ProxyAuthenticationException">
            <summary>
            The exception thrown when proxy authentication failed.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.ProxyAuthenticationException.#ctor(System.String)">
            <summary>
            Constructor for ProxyAuthenticationException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.ServiceDisabledException">
            <summary>
            The exception thrown when the user could not get access to content due to the service being disabled.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Exceptions.ServiceDisabledException.Extent">
            <summary>
            Gets the extent for which the service is disabled.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.ServiceDisabledException.#ctor(Microsoft.InformationProtection.ServiceDisablementExtent,System.String)">
            <summary>
            Constructor for ServiceDisabledException
            </summary>
            <param name="extent">The extent for which the service is disabled</param>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.TemplateArchivedException">
            <summary>
            Template has been archived and is unavailable for protection
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.TemplateArchivedException.#ctor(System.String)">
            <summary>
            Constructor for TemplateArchivedException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Exceptions.TemplateNotFoundException">
            <summary>
            Template ID is not recognized
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Exceptions.TemplateNotFoundException.#ctor(System.String)">
            <summary>
            Constructor for TemplateNotFoundException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Microsoft.InformationProtection.BadInputErrorCode">
            <summary>
            Category of bad input error. (See BadInputException)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.BadInputErrorCode.General">
            <summary>
            General bad input error
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.BadInputErrorCode.FileIsTooLargeForProtection">
            <summary>
            HTTP response code indicates failure
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.BadInputErrorCode.ParameterParsing">
            <summary>
            Parameter cannot be parsed correctly
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.BadInputErrorCode.LicenseNotTrusted">
            <summary>
            Publishing license not issued by trusted source
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.BadInputErrorCode.DoubleKey">
            <summary>
            A paremeter for double key encryption is needed and missing
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.NetworkExceptionCategory">
            <summary>
            Category of network error. (See NetworkException)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.Unknown">
            <summary>
            Unknown network failure
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.FailureResponseCode">
            <summary>
            HTTP response code indicates failure
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.BadResponse">
            <summary>
            HTTP response could not be read
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.UnexpectedResponse">
            <summary>
            HTTP response completed but contained unexpected data
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.NoConnection">
            <summary>
            Failed to establish a connection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.Proxy">
            <summary>
            Proxy failure
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.SSL">
            <summary>
            SSL failure
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.Timeout">
            <summary>
            Connection timed out
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.Offline">
            <summary>
            Operation requires network connectivity
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.Throttled">
            <summary>
            HTTP operation failed due to server traffic throttling
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.Cancelled">
            <summary>
            HTTP operation has been cancelled by the application
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.FunctionNotImplemented">
            <summary>
             HTTP response code indicates called function is not implemented
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.NetworkExceptionCategory.ServiceUnavailable">
            <summary>
             HTTP response code indicates service is unavailable
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.File.BodyType">
            <summary>
            Body type enumerator.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.BodyType.UNKNOWN">
            <summary>
            Unkown body type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.BodyType.TXT">
            <summary>
            Text style body type, encoding is returned as utf8.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.BodyType.HTML">
            <summary>
            HTML style body type, encoding is returned as utf8.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.BodyType.RTF">
            <summary>
            RTF style body type, a binary format.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.File.FileEngineSettings">
            <summary>
            This class is used to retrieve an <see cref="T:Microsoft.InformationProtection.File.IFileEngine"/> from a <see cref="M:Microsoft.InformationProtection.File.IFileProfile.AddEngineAsync(Microsoft.InformationProtection.File.FileEngineSettings)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.AuthDelegate">
            <summary>
            The auth delegate used for acquiring authentication tokens
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.LabelFilterDeprecated">
            <summary>
            Stores the value of the deprecated label filter (see FunctionalityFilterType property). Used internally for passing the value to native code
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.EngineId">
            <summary>
            The engine Id
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.Identity">
            <summary>
            The identity
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.ClientData">
            <summary>
            The engine client data
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.Locale">
            <summary>
            The engine locale
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.CustomSettings">
            <summary>
            A list of name/value pairs used for testing and experimentation.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.SessionId">
            <summary>
            The engine session id.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.Cloud">
            <summary>
            Sets the cloud. If not set, it will default to commercial cloud
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.ProtectionCloudEndpointBaseUrl">
            <summary>
            Sets the protection cloud endpoint base url, used to specify cloud boundary (e.g. "api.aadrm.com"). This
            value will only be read and must be set for Cloud = Custom.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.PolicyCloudEndpointBaseUrl">
            <summary>
            Sets the policy cloud endpoint base url, used to specify cloud boundary
            (e.g. "dataservice.protection.outlook.com"). This value will only be read and must be set for Cloud = Custom.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.ProtectionOnlyEngine">
            <summary>
            Sets protection only engine indicator - no policy/label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.LoadSensitivityTypes">
            <summary>
            Indicates if should pull the sensitivity types with the policy.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.EnablePFile">
            <summary>
            Check whether produce PFile or not
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.DelegatedUserEmail">
            <summary>
            Sets the delegated user
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.LoggerContext">
            <summary>
            Logger context that will be opaquely passed to the logger delegate for logs associated with the created engine
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.LabelFilter">
            <summary>
             The label filter, used to filter labels on list sensitivity labels calls. If not set HyokProtection and 
             DoubleKeyProtection are filtered.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileEngineSettings.ConfiguredFunctionality">
            <summary>
             Functionality that has been enabled (true), or disabled (false).  By default HyokProtection, DoubleKeyProtection, DoubleKeyUserDefinedProtection, 
             EncryptOnlyProtection, and MachineLearningClassifier are disabled
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileEngineSettings.#ctor(System.String,Microsoft.InformationProtection.IAuthDelegate,System.String,System.String)">
            <summary>
            Creates an instance with the given parameters.
            </summary>
            <param name="engineId">Set it to the unique engine id generated by AddEngineAsync.</param>
            <param name="authDelegate">The AuthDelegate</param>
            <param name="clientData"></param>
            <param name="locale"></param>
        </member>
        <member name="T:Microsoft.InformationProtection.File.FileExecutionState">
            <summary>
            A callbacks abstract class for <see cref="T:Microsoft.InformationProtection.File.IFileHandler"/>
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileExecutionState.GetDataState">
            <summary>
            The content state.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileExecutionState.GetAuditMetadata">
            <summary>
            Return a dictionary of application specific audit key-value pairs. 
            
            Registered Key:Value pairs:
            Sender: Email Id for the sender
            Recipients: Represents a JSON array of recipients for an email 
            LastModifiedBy: Email Id for the user who last modified the content 
            LastModifiedDate: Date the content was last modified 
            </summary>
            <returns>A list of audit metadata</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileExecutionState.GetClassificationResults(Microsoft.InformationProtection.File.IFileHandler,System.Collections.Generic.List{Microsoft.InformationProtection.Policy.ClassificationRequest})">
            <summary>
            Return a map of classification results.
            </summary>
            <param name="fileHandler">The file handler of the file riquired classification</param>
            <param name="classificationIds">A list of classification id's</param>
            <returns>A list of classification result, null if no classification cycle executed.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileExecutionState.GetApplicationScenarioId">
            <summary>
            Return an identifier which correlates application events with the corresponding protection service REST requests.
            </summary>
            <returns>An identifier (usually specified as a GUID).</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.File.FileHandler">
            <summary>
            Static method for <see cref="T:Microsoft.InformationProtection.File.IFileHandler">IFileHandler</see> interface/>
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.IsProtected(System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Checks whether a file is protected or not.
            </summary>
            <param name="filePath">The file path</param>
            <param name="mipContext"></param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.IsProtected(System.IO.Stream,System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Checks whether a stream is protected or not.
            </summary>
            <param name="inputStream"></param>
            <param name="inputFileName"></param>
            <param name="mipContext"></param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.IsLabeledOrProtected(System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Checks whether a file is labeled/protected or not.
            </summary>
            <param name="filePath">The file path</param>
            <param name="mipContext"></param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.IsLabeledOrProtected(System.IO.Stream,System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Checks whether a stream is labeled/protected or not.
            </summary>
            <param name="inputStream"></param>
            <param name="inputFileName"></param>
            <param name="mipContext"></param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.GetFileStatus(System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Checks whether a file is labeled, protected or contains protected objects.
            </summary>
            <param name="filePath">Path of file to check</param>
            <param name="mipContext">Global MIP context state</param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns>a FileStatus object</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.GetFileStatus(System.IO.Stream,System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Checks whether a file is labeled, protected or contains protected objects.
            </summary>
            <param name="inputStream">Stream containing file data to check</param>
            <param name="filePath">File path associated with data in 'inputStream'</param>
            <param name="mipContext">Global MIP context state</param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns>a FileStatus object</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.GetSerializedPublishingLicense(System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Return Publishing License if file has it.
            </summary>
            <param name="filePath"></param>
            <param name="mipContext"></param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileHandler.GetSerializedPublishingLicense(System.IO.Stream,System.String,Microsoft.InformationProtection.MipContext,System.Object)">
            <summary>
            Return Publishing License if file has it.
            </summary>
            <param name="inputStream"></param>
            <param name="inputFileName"></param>
            <param name="mipContext"></param>
            <param name="logContext">Logger context that will be opaquely passed to the logger delegate</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.InformationProtection.File.FileProfileSettings">
            <summary>
            Settings used by FileProfile during its creation and throughout its lifetime
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileProfileSettings.MipContext">
            <summary>
            Global MIP context state
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileProfileSettings.CacheStorageType">
            <summary>
            Storage Type to use - whether or not state should be stored on disk.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileProfileSettings.ConsentDelegate">
            <summary>
            The consent delegate used to connect to external URLs
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileProfileSettings.CanCacheLicenses">
            <summary>
            Configures whether or not end user licenses (EULs) will be cached locally
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.FileProfileSettings.LoggerContext">
            <summary>
            Logger context that will be opaquely passed to the logger delegate for logs associated with the created profile
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.FileProfileSettings.#ctor(Microsoft.InformationProtection.MipContext,Microsoft.InformationProtection.CacheStorageType,Microsoft.InformationProtection.IConsentDelegate)">
            <summary>
            FileProfileSettings constructor
            </summary>
            <param name="mipContext">The <see cref="P:Microsoft.InformationProtection.File.FileProfileSettings.MipContext"/></param>
            <param name="cacheStorageType">The <see cref="P:Microsoft.InformationProtection.File.FileProfileSettings.CacheStorageType"/></param>
            <param name="consentDelegate">The <see cref="P:Microsoft.InformationProtection.File.FileProfileSettings.ConsentDelegate"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.File.IFileEngine">
            <summary>
            Interface for all engine functions.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileEngine.CreateFileHandlerAsync(System.String,System.String,System.Boolean,Microsoft.InformationProtection.File.FileExecutionState,System.Boolean)">
            <summary>
            Starts creating a file handler for given file path.
            </summary>
            <param name="inputFilePath">The file to open. The path must include the file name and, if one exists, the file name extension. </param>
            <param name="actualFilePath">The real (not temporary) file path, will be used for audit. </param>
            <param name="isAuditDiscoveryEnabled">A bool representing whether audit discovery should be enabled or not. </param>
            <param name="fileExecutionState">A callback class for <see cref="T:Microsoft.InformationProtection.File.IFileHandler"/></param>
            <param name="isGetSensitivityLabelAuditDiscoveryEnabled">A bool representing whether audit discovery is triggered for getSensitivityLabel or not. </param>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains the <c>IFileHandler</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileEngine.CreateFileHandlerAsync(System.IO.Stream,System.String,System.Boolean,Microsoft.InformationProtection.File.FileExecutionState,System.Boolean)">
            <summary>
            Starts creating a file handler for given file stream.
            </summary>
            <param name="inputStream">A stream that represents the file.</param>
            <param name="inputFilePath">The file name. if one exists, it should include the file extension. </param>
            <param name="isAuditDiscoveryEnabled">A bool representing whether audit discovery should be enabled or not. </param>
            <param name="fileExecutionState">A callback class for <see cref="T:Microsoft.InformationProtection.File.IFileHandler"/></param>
            <param name="isGetSensitivityLabelAuditDiscoveryEnabled">A bool representing whether audit discovery is triggered for getSensitivityLabel or not.</param>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains the <c>IFileHandler</c>.</returns>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.Settings">
            <summary>
            Returns the engine settings.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.CustomSettings">
            <summary>
             The custom policy settings. set by the tenant admin.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.DefaultSensitivityLabel">
            <summary>
            Gets the default sensitivity label. 
            </summary>
            <value>Default sensitivy label if exists, <c>null</c>if there is no default label set.</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.SensitivityLabels">
            <summary>
            Returns a list of sensitivity labels.
            </summary>
            <value>The sensitivity labels.</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.SensitivityTypes">
            <summary>
            List the sensitivity types associated with the policy engine.
            </summary>
            <value>A list of sensitivity labels. empty if LoadSensitivityTypesEnabled was false</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.MoreInfoUrl">
            <summary>
            Provide a url for looking up more information regarding the policy/labels.
            </summary>
            <value>A url in string format.</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.IsLabelingRequired">
            <summary>
            Checks whether or not the policy dictates that a document must be labeled.
            </summary>
            <value>True if labeling is mandatory, else false.</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.HasClassificationRules">
            <summary>
            Gets if the policy has automatic or recommandation rules.
            </summary>
            <value>True if the policy contains automatic or recommendation rules, else false.</value>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileEngine.HasWorkloadConsent(Microsoft.InformationProtection.Workload)">
            <summary>
            Checks workload consent
            </summary>
            <value>Checks if workload is consented, true if not specified</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.PolicyFileId">
            <summary>
            Provide the policy ID.
            </summary>
            <value>A string with the policy ID</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.SensitivityTypesFileId">
            <summary>
            Provide the sensitivity types file ID.
            </summary>
            <value>A string with the sensitivity types ID</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.LastPolicyFetchTime">
            <summary>
            Provide the time when the policy was last fetched.
            </summary>
            <value>The last policy fetch Time</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileEngine.PolicyDataXml">
            <summary>
            Gets policy data XML which describes the settings, labels, and rules associated with this policy
            </summary>
            <value>Policy data XML</value>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileEngine.GetLabelById(System.String)">
            <summary>
            Gets the label according to the provided id.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileEngine.SendApplicationAuditEvent(System.String,System.String,System.String)">
            <summary>
            Logs an application specific event to the audit pipeline.
            </summary>
            <param name="level">a string representing the log level : Info/Error/Warning.</param>
            <param name="eventType">a string representing the type of event.</param>
            <param name="eventData">a string representing the data associated with the event.</param>
        </member>
        <member name="T:Microsoft.InformationProtection.File.IFileHandler">
            <summary>
            Interface for all file handling functions.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileHandler.Label">
            <summary>
            Retrieve the sensitivity label from the file.
            </summary>
            <returns>The sensitivity label from the file.</returns>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileHandler.Protection">
            <summary>
            Starts retrieving the protection handler from the file.
            </summary>
            <value>The protection handler.</value>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileHandler.OutputFileName">
            <summary>
            Calculates the output file name and extension based on the original file name and the accumulated changes.
            </summary>
            <value>The file name under which changes would be saved.</value>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.SetLabel(Microsoft.InformationProtection.Label,Microsoft.InformationProtection.File.LabelingOptions,Microsoft.InformationProtection.File.ProtectionSettings)">
            <summary>
            Sets the sensitivity label to the file.
            </summary>
            <remarks>
            Changes will not be written to the file until CommitAsync will be called.
            <para>Will throw a JustificationRequiredError when setting the label
            requires the operation to be justified (via the labelingOptions parameter).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.DeleteLabel(Microsoft.InformationProtection.File.LabelingOptions)">
            <summary>
            Deletes the sensitivity label from the file.
            </summary>
            <remarks>Changes will not be written to the file until CommitAsync will be called.
            <para>Will throw a JustificationRequiredError when setting the label
            requires the operation to be justified (via the labelingOptions parameter).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.SetProtection(Microsoft.InformationProtection.ProtectionDescriptor,Microsoft.InformationProtection.File.ProtectionSettings)">
            <summary>
            Sets custom permissions to the file.
            </summary>
            <remarks>Changes will not be written to the file until CommitAsync will be called.</remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.SetProtection(Microsoft.InformationProtection.Protection.IProtectionHandler)">
            <summary>
            Sets custom permissions to the file.
            </summary>
            <remarks>Changes will not be written to the file until CommitAsync will be called.</remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.RemoveProtection">
            <summary>
            Removes protection from the file. 
            If the original file format does not support labeling, 
              the label will be lost when protection is removed. 
            When the native format supports labeling, the label metadata is maintained.
            </summary>
            <remarks>Changes will not be written to the file until CommitAsync will be called.</remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.ClassifyAsync">
            <summary>
            Executes the rules in the engine based on the provided state and returns the list of actions to be executed.
            </summary>
            <returns>list of automatic and recommended actions that should be applied on the content.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.GetDecryptedTemporaryFileAsync">
            <summary>
            Create a decrypted temporary file
            </summary>
            <returns>The decrypted file file path</returns>
            <exception cref="T:System.NotSupportedException">If the file is not protected</exception>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.GetDecryptedTemporaryStreamAsync">
            <summary>
            Create a decrypted temporary stream
            </summary>
            <returns>Reference to temporary stream</returns>
            <exception cref="T:System.NotSupportedException">If the file is not protected</exception>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.CommitAsync(System.String)">
            <summary>
            Writes the changes to the file.
            </summary>
            <param name="outputFilePath">The file to write the changes to.</param>
            <returns>A task that represents the asynchronous commit operation. The value of the <c>TResult</c> parameter contains the whether there were changes to commit to the output file.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.CommitAsync(System.IO.Stream)">
            <summary>
            Writes the changes to a file stream.
            </summary>
            <param name="outputStream">The stream to write the changes to.</param>
            <remarks>outputStream must not be the same as inputStream used for creating the handler.</remarks>
            <returns>A task that represents the asynchronous commit operation. The value of the <c>TResult</c> parameter contains the whether there were changes to commit to the output file.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.InspectAsync">
            <summary>
            Create file inspector for the object if possible, useful when trying to inspect (e.g.reading body) supported formats.
            </summary>
            <returns>A task that represents the asynchronous File inspect operation. The value of the <c>TResult</c> parameter contains the inspector.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.IsModified">
            <summary>		
            Finds if there are changes to apply on the file.		
            </summary>		
            <returns>Whether there are changes to commit to the file</returns>		
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.NotifyCommitSuccessful(System.String)">
            <summary>
             To be called when the changes have been committed to disk
             </summary>
             <param name="actualFilePath">The actual file path for the output file.</param>
             <remarks>Fires an Audit event.</remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.GetProperties(System.UInt32)">
            <summary>
            Retrieve the properties from the file.
            </summary>
            <param name="version">The version of the properties.</param>
            <returns>The properties of the file.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.RegisterContentForTrackingAndRevocationAsync(System.Boolean)">
            <summary>
            Register a protected document for tracking and revocation.
            </summary>
            <param name="isOwnerNotificationEnabled">Set to true to notify the owner via email whenever the document is decrypted, or false to not send the notification.</param>
            <returns>A task that represents the asynchronous create operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileHandler.RevokeContentAsync">
            <summary>
            Perform revocation for protected content.
            </summary>
            <returns>A task that represents the asynchronous create operation.</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.File.IFileInspector">
            <summary>
             IFileInspector class is the class used to retrieve inspection objects.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileInspector.Type">
            <summary>
             Get Type of Inspector.
            </summary>
            <returns>Type of inspector.</returns>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileInspector.Stream">
            <summary>
             Get Raw file data steam.
            </summary>
            <returns>Raw data stream.</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.File.IFileProfile">
            <summary>
             FileProfile class is the root class for using the Microsoft Information Protection operations.
            <para>A typical application will only need one Profile but it can create multiple profiles if needed.</para>
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IFileProfile.Settings">
            <summary>
            Gets the profile settings.
            </summary>
            <value>The profile settings.</value>
        </member>
        <member name="E:Microsoft.InformationProtection.File.IFileProfile.OnPolicyChanged">
            <summary>
            An event that is called whenever the underlying policy is changed.
            </summary>
            <remarks>To load the new policy it is necessary to call <see cref="M:Microsoft.InformationProtection.File.IFileProfile.AddEngineAsync(Microsoft.InformationProtection.File.FileEngineSettings)"/> again with the engine Id given by <see cref="P:Microsoft.InformationProtection.PolicyChangedEventArgs.EngineId"/></remarks>
        </member>
        <member name="E:Microsoft.InformationProtection.File.IFileProfile.OnAddPolicyEngineStarting">
            <summary>
            An event that is called prior to the creation of a new policy engine.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileProfile.ListEnginesAsync">
            <summary>
            Starts list engines operation.
            </summary>
            <returns>A task that represents the asynchronous list engines operation. The value of the <c>TResult</c> parameter contains the list of engine ids.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileProfile.AddEngineAsync(Microsoft.InformationProtection.File.FileEngineSettings)">
            <summary>
            Starts adding a new file engine to the profile.
            </summary>
            <param name="settings">The file engine settings.</param>
            <returns>A task that represents the asynchronous add engine operation. The value of the <c>TResult</c> parameter contains the <c>IFileEngine</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileProfile.DeleteEngineAsync(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns>A task that represents the asynchronous delete engine operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileProfile.UnloadEngineAsync(System.String)">
            <summary>
            Starts unloading the file engine with the given id.
            </summary>
            <param name="id">The id of the engine to unload </param>
            <returns>A task that represents the asynchronous unload engine operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileProfile.AcquirePolicyAuthToken(Microsoft.InformationProtection.Cloud,Microsoft.InformationProtection.IAuthDelegate)">
            <summary>
            Trigger a policy authentication callback
            </summary>
            <param name="cloud">Azure cloud.</param>
            <param name="authDelegate">Authentication callback that will be invoked.</param>
        </member>
        <member name="T:Microsoft.InformationProtection.File.IFileStatus">
            <summary>
            Interface for all file status functions.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileStatus.IsProtected">
            <summary>		
            Finds if the file is protected or not.		
            </summary>		
            <returns>Whether the file is protected</returns>		
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileStatus.IsLabeled">
            <summary>		
            Finds if the file is labeled or not.		
            </summary>		
            <returns>Whether the file is labeled</returns>		
        </member>
        <member name="M:Microsoft.InformationProtection.File.IFileStatus.ContainsProtectedObjects">
            <summary>		
            Finds if the file contains protected objects or not		
            </summary>		
            <returns>Whether an unprotected container file contains protected objects</returns>		
        </member>
        <member name="T:Microsoft.InformationProtection.File.InspectorType">
            <summary>
             InspectorType enum used to identified support inspection types.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.InspectorType.Unknown">
            <summary>
             Unkown file inspector.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.InspectorType.Msg">
            <summary>
             Msg style file inspector, rpmsg / msg based.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.File.IMsgAttachmentData">
            <summary>
            Interface for all msg attachment handling.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgAttachmentData.Bytes">
            <summary>
            Get the raw bytes of message stream.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgAttachmentData.Stream">
            <summary>
            Get the message attachment as stream.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgAttachmentData.Name">
            <summary>
            Get attachment name.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgAttachmentData.LongName">
            <summary>
            Get attachment long name.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgAttachmentData.Path">
            <summary>
            Get attachment path.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgAttachmentData.LongPath">
            <summary>
            Get attachment long path.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.File.IMsgInspector">
            <summary>
             IMsgInspector class is the class used to inspect msg, rpmsg that types.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgInspector.Body">
            <summary>
             Get the message body.
            </summary>
            <returns>list of bytes representing the message body, format dependent on body type</returns>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgInspector.CodePage">
            <summary>
             Get body encoding code page, relevant for txt, html body formats.
            </summary>
            <returns>unsigned code page. @see https://docs.microsoft.com/en-us/windows/win32/intl/code-page-identifiers</returns>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgInspector.BodyType">
            <summary>
             Get body type.
            </summary>
            <returns>Body type</returns>
        </member>
        <member name="P:Microsoft.InformationProtection.File.IMsgInspector.Attachments">
            <summary>
             Attachments.
            </summary>
            <returns>list of attachments</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.File.LabelingOptions">
            <summary>
            Class for configuring labeling options for the <see cref="M:Microsoft.InformationProtection.File.IFileHandler.SetLabel(Microsoft.InformationProtection.Label,Microsoft.InformationProtection.File.LabelingOptions,Microsoft.InformationProtection.File.ProtectionSettings)"/> method
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.LabelingOptions.AssignmentMethod">
            <summary>
            The label assignment method
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.LabelingOptions.IsDowngradeJustified">
            <summary>
            Controls whether or not justification to downgrade an existing label was given.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.LabelingOptions.JustificationMessage">
            <summary>
            The justification message when lowering a label.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.LabelingOptions.ExtendedProperties">
            <summary>
            List of key value pairs representing the extended properties applied to the content.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.File.PFileExtensionBehavior">
            <summary>
            Describes PFile extensions behavior
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.PFileExtensionBehavior.Default">
            <summary>
            Extensions will become as SDK default behavior
            </summary>        
        </member>
        <member name="F:Microsoft.InformationProtection.File.PFileExtensionBehavior.PFileSuffix">
            <summary>
            Extensions will become (EXT).PFILE
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.File.PFileExtensionBehavior.PPrefix">
            <summary>
            Extensions will become P(EXT>)
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.File.ProtectionSettings">
            <summary>
            Class for configuring protection settings for the <see cref="M:Microsoft.InformationProtection.File.IFileHandler.SetLabel(Microsoft.InformationProtection.Label,Microsoft.InformationProtection.File.LabelingOptions,Microsoft.InformationProtection.File.ProtectionSettings)"/> and <see cref="M:Microsoft.InformationProtection.File.IFileHandler.SetProtection(Microsoft.InformationProtection.ProtectionDescriptor,Microsoft.InformationProtection.File.ProtectionSettings)"/> method
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.ProtectionSettings.DelegatedUserEmail">
            <summary>
            The protection delegated user email
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.File.ProtectionSettings.PFileExtensionBehavior">
            <summary>
            The PFile extensions behavior
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.IAuditDelegate">
            <summary>
            The interface to the MIP SDK audit.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.IAuditDelegate.Flush">
            <summary>
            Flush the delegate.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.IAuditDelegate.WriteEvent(Microsoft.InformationProtection.AuditEvent)">
            <summary>
            Writes an audit event
            </summary>
            <param name="auditEvent">Audit event to write.</param>
        </member>
        <member name="M:Microsoft.InformationProtection.IAuditDelegate.SetEnableAuditSetting(Microsoft.InformationProtection.EnableAuditSetting)">
            <summary>
            Sets the audit setting as present in policy that can be used while writting the event.
            </summary>
            <param name="enableAuditSetting">Audit settings to set.</param>
        </member>
        <member name="T:Microsoft.InformationProtection.IAuthDelegate">
            <summary>
            Interface that is used to provide mip with the user token.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.IAuthDelegate.AcquireToken(Microsoft.InformationProtection.Identity,System.String,System.String,System.String)">
            <summary>
            This method is called when an auth token is required for the policy engine with the given identity and the given challenge. 
            </summary>
            <param name="identity">The identity of the user.</param>
            <param name="authority">The authority the token needs to be generated against.</param>
            <param name="resource">The resource the token is set to.</param>
            <param name="claims">The claims requested for the token.</param>
            <returns>The token needed for accessing the resource.</returns>
            <remarks>If the application failed to acquire a token, it should throw an exception in this function.</remarks>
        </member>
        <member name="T:Microsoft.InformationProtection.IConsentDelegate">
            <summary>
            Interface that is used to obtain consent from a user to access a URL
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.IConsentDelegate.GetUserConsent(System.String)">
            <summary>
            This method is called prior to MIP accessing an external URL
            </summary>
            <param name="url">The URL that will be accessed</param>
            <returns>The level of consent the user grants to MIP when accessing the URL</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.Identity">
            <summary>
            Creates an instance with the given email address. Use this when the email address of the user is known.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Identity.Email">
            <summary>
            Get/Set the email
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Identity.Name">
            <summary>
            Get/Set the name
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Identity.#ctor(System.String)">
            <summary>
            Constructor for Identity
            </summary>
            <param name="email">The email</param>
        </member>
        <member name="M:Microsoft.InformationProtection.Identity.#ctor(System.String,System.String)">
            <summary>
            Constructor for Identity
            </summary>
            <param name="email">The email</param>
            <param name="name">The name</param>
        </member>
        <member name="T:Microsoft.InformationProtection.ILoggerDelegate">
            <summary>
            The interface to the MIP SDK logger.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.ILoggerDelegate.Init(System.String)">
            <summary>
            Initialize the logger.
            </summary>
            <param name="storagePath">The path to the location where persistent state, including logs, may be stored.</param>
        </member>
        <member name="M:Microsoft.InformationProtection.ILoggerDelegate.Flush">
            <summary>
            Flush the logger.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.ILoggerDelegate.WriteToLog(Microsoft.InformationProtection.LogLevel,System.String,System.String,System.String,System.Int32)">
            <summary>
            Write a log statement to log file.
            </summary>
            <param name="logLevel">The log level for the log statement.</param>
            <param name="message">The message for the log statement.</param>
            <param name="functionName">The function name for the log statement.</param>
            <param name="fileName">The file name where log statement was generated.</param>
            <param name="lineNo">The line number where the log statement was generated.</param>
        </member>
        <member name="T:Microsoft.InformationProtection.ILoggerDelegateV2">
            <summary>
            The interface to the MIP SDK logger with support for a loggerContext that was passed in on an API call
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.ILoggerDelegateV2.WriteToLog(Microsoft.InformationProtection.LogLevel,System.String,System.String,System.String,System.Int32,System.Object)">
            <summary>
            Write a log statement to log file.
            </summary>
            <param name="logLevel">The log level for the log statement.</param>
            <param name="message">The message for the log statement.</param>
            <param name="functionName">The function name for the log statement.</param>
            <param name="fileName">The file name where log statement was generated.</param>
            <param name="lineNo">The line number where the log statement was generated.</param>
            <param name="loggerContext">Client context that was passed into the call that generated this log message</param>
        </member>
        <member name="T:Microsoft.InformationProtection.ITelemetryDelegate">
            <summary>
            The interface to the MIP SDK telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.ITelemetryDelegate.Flush">
            <summary>
            Flush the delegate.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.ITelemetryDelegate.WriteEvent(Microsoft.InformationProtection.TelemetryEvent)">
            <summary>
            Writes an Telemetry event
            </summary>
            <param name="telemetryEvent">Telemetry event to write.</param>
        </member>
        <member name="T:Microsoft.InformationProtection.EnableAuditSetting">
            <summary>
            Different log levels used across the MIP SDK.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EnableAuditSetting.Undefined">
            <summary>
            No Audit setting set in policy.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EnableAuditSetting.Enabled">
            <summary>
            EnableAudit set to true in policy.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.EnableAuditSetting.Disabled">
            <summary>
            EnableAudit set to false in policy.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.FunctionalityFilterType">
            <summary>
            Functionality filter types, optional set of properties that can be used to filter labels when calling list sensitivity 
            labels. Also used to filter general functionality of MIP, like toggling specific classifiers for autolabeling.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.None">
            <summary>
            Disable any default filtering if exists
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.CustomProtection">
            <summary>
            Label filter that may result in do not custom protection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.TemplateProtection">
            <summary>
            Label filter that may result in template protection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.DoNotForwardProtection">
            <summary>
            Label filter that may result in do not forward protection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.AdhocProtection">
            <summary>
            Label filter that may result in ad-hoc protection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.HyokProtection">
            <summary>
            Label filter that may result in hyok protection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.PredefinedTemplateProtection">
            <summary>
            Label filter that may result in predefined template protection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.DoubleKeyProtection">
            <summary>
            Label filter that may result in a double key encryption template action.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.DoubleKeyUserDefinedProtection">
            <summary>
            Label filter that may result in a double key encryption UDP action.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.EncryptOnlyProtection">
            <summary>
            Label filter that may result in an encrypt only action.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.SensitiveInformationClassifier">
            <summary>
            Classifier based on Sensitive Information Detection (e.g. Credit card number or SSN)
            Uses Microsoft Classification Engine to evaluate classifiers
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.MachineLearningClassifier">
            <summary>
            Classifier based on Machine Learning (e.g. Offensive Language)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.FunctionalityFilterType.ExtendedSensitiveInformationClassifier">
            <summary>
            Classifier based on Sensitive Information Detection (e.g. Credit card number or SSN)
            Does not use Microsoft Classification Engine
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.LogLevel">
            <summary>
            Different log levels used across the MIP SDK.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.LogLevel.Trace">
            <summary>
            Log statement is of type Trace.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.LogLevel.Info">
            <summary>
            Log statement is of type Info.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.LogLevel.Warning">
            <summary>
            Log statement is of type Warning.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.LogLevel.Error">
            <summary>
            Log statement is of type Error.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.MIP">
            <summary>
            Static class to provide the entry point for MIP applications.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.MIP.Initialize(Microsoft.InformationProtection.MipComponent,System.String)">
            <summary>
            Loads the MIP dlls needed for UPE
            </summary>
            <param name="mipComponent">The path where the MIP dlls are located. May be set to null if the MIP dlls are in the search path.</param>
            <param name="path">The path where the MIP dlls are located. May be set to null if the MIP dlls are in the search path.</param>
            <remarks>
            <c>path</c> only needs to be set, if the mip dlls are in a different folder than where the .Net assembly is located,
            or in a Non standard location.
            <para>Standard location include the current folder, or "x64" subfolder of the current folder for 64 bit applications and "x86" subfolder of the current folder for 32 bit applications.</para>
            <para>In a non standard case a sample use would be:</para>
            <code>
            var subDir = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\" + (Environment.Is64BitProcess ? "x64SubFolder" : "x86SubFOlder");
            var factory = MIP.Initialize(MipComponent.Policy, subDir);
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.MIP.CreateMipContext(Microsoft.InformationProtection.ApplicationInfo,System.String,Microsoft.InformationProtection.LogLevel,Microsoft.InformationProtection.ILoggerDelegate,Microsoft.InformationProtection.DiagnosticConfiguration,System.Collections.Generic.Dictionary{Microsoft.InformationProtection.FlightingFeature,System.Boolean})">
            <summary>
            Creates a MIP context to be used when initializing profiles
            </summary>
            <param name="appInfo">Application info description</param>
            <param name="path">Local storage path for caches, logging, etc.</param>
            <param name="logLevel">Minimum log level to emit to logs</param>
            <param name="loggerDelegateOverride">Optional alternate logger implementation</param>
            <param name="diagnosticOverride">Optional telemetry configuration settings</param>
            <param name="featureSettingsOverride">Optional custom flighting feature settings</param>
            <returns>A MIP context containing shared state applicable to all profiles, engine, handlers, etc.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.MIP.CreateMipContext(Microsoft.InformationProtection.MipConfiguration)">
            <summary>
            Creates a MIP context to be used when initializing profiles
            </summary>
            <param name="mipConfiguration">configuration required for initializing mip </param>
            <returns>A MIP context containing shared state applicable to all profiles, engine, handlers, etc.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.MIP.LoadPolicyProfileAsync(Microsoft.InformationProtection.Policy.PolicyProfileSettings)">
            <summary>
            Starts loading a profile based on the provided settings.
            </summary>
            <param name="profileSettings"> profile settings used to load the profile object.</param>
            <returns>A task that represents the asynchronous load operation. The value of the <c>TResult</c> parameter contains the <c>IPolicyProfile</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.MIP.LoadFileProfileAsync(Microsoft.InformationProtection.File.FileProfileSettings)">
            <summary>
            Starts loading a profile based on the provided |settings|.
            </summary>
            <param name="profileSettings">the profile settings</param>
            <returns>A task that represents the asynchronous load operation. The value of the <c>TResult</c> parameter contains the <c>IFileProfile</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.MIP.LoadProtectionProfileAsync(Microsoft.InformationProtection.Protection.ProtectionProfileSettings)">
            <summary>
            Starts loading a profile based on the provided settings.
            </summary>
            <param name="profileSettings">Settings used by ProtectionProfile during its initialization and throughout its lifetime</param>
            <returns>A task that represents the asynchronous load operation. The value of the <c>TResult</c> parameter contains the <c>IProtectionProfile</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.MIP.LoadProtectionProfile(Microsoft.InformationProtection.Protection.ProtectionProfileSettings)">
            <summary>
            Loads a profile based on the provided settings.
            </summary>
            <param name="profileSettings">Settings used by ProtectionProfile during its initialization and throughout its lifetime</param>
            <returns>Newly created profile.</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.MipConfiguration">
            <summary>
            Describes the MIP configuration required for initializing MipContext.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.MipConfiguration.#ctor(Microsoft.InformationProtection.ApplicationInfo,System.String,Microsoft.InformationProtection.LogLevel,System.Boolean)">
            <summary>
            Constructor for MipConfiguration
            </summary>
            <param name="appInfo">Application info description</param>
            <param name="path">Local storage path for caches, logging, etc.</param>
            <param name="logLevel">Minimum log level to emit to logs</param>
            <param name="isOfflineOnly">Whether Network operations is enabled or disabled(not all actions supported when offline)</param>
        </member>
        <member name="P:Microsoft.InformationProtection.MipConfiguration.DiagnosticOverride">
            <summary>
            DiagnosticConfiguration override for audit/telemetry
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.MipConfiguration.LoggerDelegateOverride">
            <summary>
            Logger Delegate override for writting logs
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.MipConfiguration.ApplicationInfo">
            <summary>
            Application info description
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.MipConfiguration.Path">
            <summary>
            Local storage path for caches, logging, etc.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.MipConfiguration.LogLevel">
            <summary>
            Minimum log level to emit to logs
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.MipConfiguration.IsOfflineOnly">
            <summary>
            whether Network operations is enabled or disabled(not all actions supported when offline)
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.MipConfiguration.FeatureSettingsOverride">
            <summary>
            custom flighting feature settings
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.MipContext">
            <summary>
            This class represents state that is shared across all profiles, engines, handlers.
            </summary>    
        </member>
        <member name="M:Microsoft.InformationProtection.MipContext.Dispose">
            <summary>
            Terminates MIP.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.MipContext.ShutDown">
            <summary>
            Terminates MIP
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.MipComponent">
            <summary>
            Describes the MIP profile to be used in the application.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.MipComponent.Policy">
            <summary>
            To use Policy profile.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.MipComponent.File">
            <summary>
            To use File profile.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.MipComponent.Protection">
            <summary>
            To use Protection profile.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.PolicyChangedEventArgs">
            <summary>
            Event used to notify of changes in the policy.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.PolicyChangedEventArgs.EngineId">
            <summary>
            The engine id.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.ConsumptionSettings">
            <summary>
            Settings used to create a <c>IProtectionHandler</c> to consume existing content.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ConsumptionSettings.PublishingLicenseInfo">
            <summary>
            Publishing license information
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ConsumptionSettings.IsOfflineOnly">
            <summary>
            Whether or not <c>IProtectionHandler</c> creation allows for online HTTP operations. 
            </summary>
            <value>
            True if HTTP operations are disallowed, else false
            </value>
            <remarks>
            If this is set to true, <c>IProtectionHandler</c> creation will only succeed if content has already been
            previously decrypted and its unexpired license is cached. A mip::NetworkError will be thrown if cached
            content is not found.
            </remarks>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ConsumptionSettings.DelegatedUserEmail">
            <summary>
            Delegated user
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ConsumptionSettings.ContentName">
            <summary>
            Content Name for performing registration during consumption if not already done
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.ConsumptionSettings.#ctor(Microsoft.InformationProtection.Protection.PublishingLicenseInfo)">
            <summary>
            ProtectionConsumptionSettings constructor
            </summary>
            <param name="publishingLicenseInfo">The <see cref="P:Microsoft.InformationProtection.Protection.ConsumptionSettings.PublishingLicenseInfo"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.DelegationLicenseSettings">
            <summary>
            Settings used to obtain delegation licenses
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.DelegationLicenseSettings.PublishingLicenseInfo">
            <summary>
            The publishing license to obtain delegated licenses for
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.DelegationLicenseSettings.Users">
            <summary>
            The users to obtain delegated licenses for
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.DelegationLicenseSettings.AcquireEndUserLicenses">
            <summary>
            Whether or not to obtain end user licenses
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.DelegationLicenseSettings.#ctor(Microsoft.InformationProtection.Protection.PublishingLicenseInfo)">
            <summary>
            DelegationLicenseSettings constructor
            </summary>
            <param name="publishingLicenseInfo">The <see cref="P:Microsoft.InformationProtection.Protection.DelegationLicenseSettings.PublishingLicenseInfo"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.GetTemplatesSettings">
            <summary>
            Settings to use when obtaining templates
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.GetTemplatesSettings.DelegatedUserEmail">
            <summary>
            Delegated user
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.IDelegationLicense">
            <summary>
            Interface that exposes methods to access a delegation license
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IDelegationLicense.GetSerializedDelegationJsonLicense">
            <summary>
            Obtains a serialized delegation license in json format
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IDelegationLicense.GetSerializedDelegationXrmlLicense">
            <summary>
            Obtains a serialized delegation license in xrml format
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IDelegationLicense.GetSerializedUserLicense(Microsoft.InformationProtection.Protection.PreLicenseFormat)">
            <summary>
            Obtains a serialized end user license
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IDelegationLicense.User">
            <summary>
            Gets  the user that this delegated license was obtained for
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.IProtectionEngine">
            <summary>
            This class manages protection-related actions related to a specific identity.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionEngine.Settings">
            <summary>
            Returns the engine settings.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.GetTemplatesAsync">
            <summary>
            Starts getting collection of templates available to a user.
            </summary>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains the list of template IDs.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.GetTemplates">
            <summary>
            Get collection of templates available to a user.
            </summary>
            <returns>List of template IDs.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.GetTemplatesAsync(Microsoft.InformationProtection.Protection.GetTemplatesSettings)">
            <summary>
            Starts getting collection of templates available to a user.
            </summary>
            <param name="settings">Settings to use when obtaining templates</param>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains the list of template IDs.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.GetTemplates(Microsoft.InformationProtection.Protection.GetTemplatesSettings)">
            <summary>
            Get collection of templates available to a user.
            </summary>
            <param name="settings">Settings to use when obtaining templates</param>
            <returns>List of template IDs.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.GetRightsForLabelIdAsync(System.String,System.String,System.String,System.String,Microsoft.InformationProtection.Protection.ProtectionCommonSettings)">
            <summary>
            Starts getting collection of rights available to a user for a label ID.
            </summary>
            <param name="documentId">Document ID associated with the document metadata.</param>
            <param name="labelId">Label ID associated with the document metadata with which the document created.</param>
            <param name="ownerEmail">Owner of the document.</param>
            <param name="delegatedUserEmail">A delegated user is specified when the authenticating user/application is acting on behalf of another user, empty if none.</param>
            <param name="settings">Common settings for protection</param>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains the list of rights.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.GetRightsForLabelId(System.String,System.String,System.String,System.String,Microsoft.InformationProtection.Protection.ProtectionCommonSettings)">
            <summary>
            Get collection of rights available to a user for a label ID.
            </summary>
            <param name="documentId">Document ID associated with the document metadata.</param>
            <param name="labelId">Label ID associated with the document metadata with which the document created.</param>
            <param name="ownerEmail">Owner of the document.</param>
            <param name="settings">Common settings for protection</param>
            <param name="delegatedUserEmail">A delegated user is specified when the authenticating user/application is acting on behalf of another user, empty if none.</param>
            <returns>List of rights.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.CreateProtectionHandlerForPublishingAsync(Microsoft.InformationProtection.Protection.PublishingSettings)">
            <summary>
            Starts creating a protection handler where rights/roles are assigned to specific users.
            </summary>
            <param name="settings">Protection settings.</param>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains <c>IProtectionHandler</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.CreateProtectionHandlerForPublishing(Microsoft.InformationProtection.Protection.PublishingSettings)">
            <summary>
            Creates a protection handler where rights/roles are assigned to specific users.
            </summary>
            <param name="settings">Protection settings.</param>
            <returns>The <c>IProtectionHandler</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.CreateProtectionHandlerForConsumptionAsync(Microsoft.InformationProtection.Protection.ConsumptionSettings)">
            <summary>
            Starts creating a protection handler where rights/roles are assigned to specific users.
            </summary>
            <param name="settings">Protection settings.</param>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains <c>IProtectionHandler</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.CreateProtectionHandlerForConsumption(Microsoft.InformationProtection.Protection.ConsumptionSettings)">
            <summary>
            Creates a protection handler where rights/roles are assigned to specific users.
            </summary>
            <param name="settings">Protection settings.</param>
            <returns>The <c>IProtectionHandler</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.RegisterContentForTrackingAndRevocation(Microsoft.InformationProtection.Protection.PublishingLicenseInfo,System.String,System.Boolean,Microsoft.InformationProtection.Protection.ProtectionCommonSettings)">
            <summary>
            Register publishing license (PL) for document tracking and revocation.
            </summary>
            <param name="licenseInfo">Publishing license from the protected content.</param>
            <param name="contentName">The name to associate with the content specified by the serializedPublishingLicense. If the serializedPublishingLicense specifies a content name, that value will take precedence.</param>
            <param name="isOwnerNotificationEnabled">Set to true to notify the owner via email whenever the document is decrypted, or false to not send the notification.</param>
            <param name="settings">Common settings for protection</param>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.RegisterContentForTrackingAndRevocationAsync(Microsoft.InformationProtection.Protection.PublishingLicenseInfo,System.String,System.Boolean,Microsoft.InformationProtection.Protection.ProtectionCommonSettings)">
            <summary>
            Register publishing license (PL) for document tracking and revocation.
            </summary>
            <param name="licenseInfo">Publishing license from the protected content.</param>
            <param name="contentName">The name to associate with the content specified by the serializedPublishingLicense. If the serializedPublishingLicense specifies a content name, that value will take precedence.</param>
            <param name="isOwnerNotificationEnabled">Set to true to notify the owner via email whenever the document is decrypted, or false to not send the notification.</param>
            <param name="settings">Common settings for protection</param>
            <returns>A task that represents the asynchronous create operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.RevokeContent(Microsoft.InformationProtection.Protection.PublishingLicenseInfo,Microsoft.InformationProtection.Protection.ProtectionCommonSettings)">
            <summary>
            Perform revocation for content.
            </summary>
            <param name="licenseInfo">Publishing license from the protected content.</param>
            <param name="settings">Common settings for protection</param>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.RevokeContentAsync(Microsoft.InformationProtection.Protection.PublishingLicenseInfo,Microsoft.InformationProtection.Protection.ProtectionCommonSettings)">
            <summary>
            Perform revocation for content.
            </summary>
            <param name="licenseInfo">Publishing license from the protected content.</param>
            <param name="settings">Common settings for protection</param>
            <returns>A task that represents the asynchronous create operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.CreateDelegationLicenses(Microsoft.InformationProtection.Protection.DelegationLicenseSettings)">
            <summary>
            Creates a delegated license.
            </summary>
            <param name="settings">The delegation settings.</param>
            <returns>List of <c>IDelegationLicense</c></returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionEngine.CreateDelegationLicensesAsync(Microsoft.InformationProtection.Protection.DelegationLicenseSettings)">
            <summary>
            Creates a delegated license.
            </summary>
            <param name="settings">The delegation settings.</param>
            <returns>A task that represents the asynchronous create operation. The value of the <c>TResult</c> parameter contains <c>IDelegationLicense</c>.</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.IProtectionHandler">
            <summary>
            Interface for all protection-related actions for a specific protection configuration.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.ProtectionDescriptor">
            <summary>
            The protection descriptor for an ad hoc protection handler or <c>null</c> otherwise
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.Owner">
            <summary>
            Email address of content owner
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.IssuedTo">
            <summary>
            The user associated with the protection handler
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.IsIssuedToOwner">
            <summary>
            Whether or not the current user is the content owner
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.ContentId">
            <summary>
            The unique identifier for the document/content
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.UseDeprecatedAlgorithms">
            <summary>
            Whether or not protection handler uses deprecated crypto algorithms (ECB) for backward compatibility
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.AuditedExtractAllowed">
            <summary>
            Whether or not protection handler grants user 'audited extract' right
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.Rights">
            <summary>
            Gets the rights granted to the user/identity associated with this ProtectionHandler
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionHandler.AccessCheck(System.String)">
            <summary>
            Checks if protection handler grants user access to the specified right
            </summary>
            <param name="right">Right to check</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionHandler.BlockSize">
            <summary>
            The block size (in bytes) for the cipher mode used by this ProtectionHandler
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionHandler.GetProtectedContentLength(System.Int64,System.Boolean)">
            <summary>
            Calculates size (in bytes) of content if it were to be encrypted with this ProtectionHandler
            </summary>
            <param name="unprotectedLength">Size (in bytes) of unprotected content</param>
            <param name="includesFinalBlock">Describes if the unprotected content in question includes the final block or not.
            For example, in CBC4k encryption mode, non-final protected blocks are the same size as unprotected blocks,
            but final protected blocks are larger than their unprotected counterparts.</param>
            <returns>Size (in bytes) of protected content.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionHandler.EncryptBuffer(System.Int64,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Encrypt a buffer
            </summary>
            <param name="offsetFromStart">Relative position of inputBuffer from the very beginning of the cleartext content</param>
            <param name="inputBuffer">Buffer of cleartext content that will be encrypted</param>
            <param name="outputBuffer">Buffer into which encrypted content will be copied</param>
            <param name="isFinal">If input buffer contains the final cleartext bytes or not</param>
            <returns>Actual size (in bytes) of encrypted content.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionHandler.DecryptBuffer(System.Int64,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Decrypt a buffer
            </summary>
            <param name="offsetFromStart">Relative position of inputBuffer from the very beginning of the encrypted content</param>
            <param name="inputBuffer">Buffer of encrypted content that will be decrypted</param>
            <param name="outputBuffer">Buffer into which decrypted content will be copied</param>
            <param name="isFinal">If input buffer contains the final cleartext bytes or not</param>
            <returns>Actual size (in bytes) of decrypted content.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionHandler.GetSerializedPublishingLicense">
            <summary>
            Serialize ProtectionHandler into a publishing license (PL)
            </summary>
            <returns>Serialized publishing license.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionHandler.GetSerializedPreLicense(Microsoft.InformationProtection.Protection.PreLicenseFormat)">
            <summary>
            Returns the serialized prelicense
            </summary>
            <param name="format">The format of the prelicense</param>
            <returns>Serialized prelicense.</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.IProtectionProfile">
            <summary>
            IProtectionProfile is the root class for performing protection operations
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.IProtectionProfile.Settings">
            <summary>
            Gets the profile settings.
            </summary>
            <value>The profile settings.</value>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionProfile.ListEnginesAsync">
            <summary>
            Starts list engines operation.
            </summary>
            <returns>A task that represents the asynchronous list engines operation. The value of the <c>TResult</c> parameter contains the list of engine ids.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionProfile.ListEngines">
            <summary>
            List engines.
            </summary>
            <returns>Cached engine IDs.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionProfile.AddEngineAsync(Microsoft.InformationProtection.Protection.ProtectionEngineSettings)">
            <summary>
            Starts adding a new protection engine to the profile.
            </summary>
            <param name="settings">The protection engine settings.</param>
            <returns>A task that represents the asynchronous add engine operation. The value of the <c>TResult</c> parameter contains the <c>IProtectionEngine</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionProfile.AddEngine(Microsoft.InformationProtection.Protection.ProtectionEngineSettings)">
            <summary>
            adds a new protection engine to the profile.
            </summary>
            <param name="settings">The protection engine settings.</param>
            <returns>Newly created <c>IProtectionEngine</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionProfile.DeleteEngineAsync(System.String)">
            <summary>
            Starts deleting the protection engine with the given ID. All data for the given engine will be deleted.
            </summary>
            <param name="id">the unique engine ID.</param>
            <returns>A task that represents the asynchronous delete engine operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.IProtectionProfile.DeleteEngine(System.String)">
            <summary>
            Delete the protection engine with the given ID. All data for the given engine will be deleted.
            </summary>
            <param name="id">the unique engine ID.</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.LicenseApplicationData">
            <summary>
            Application data from the license.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseApplicationData.Name">
            <summary>
            The extranet url
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseApplicationData.Value">
            <summary>
            The extranet url
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.LicenseConnectionInfo">
            <summary>
            Connection info from the license.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseConnectionInfo.ExtranetUrl">
            <summary>
            The extranet url
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseConnectionInfo.IntranetUrl">
            <summary>
            The extranet url
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.LicenseNameAndDescriptionItem">
            <summary>
            The descriptor line item from a license.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseNameAndDescriptionItem.Lcid">
            <summary>
            The lcid
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseNameAndDescriptionItem.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseNameAndDescriptionItem.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.LicenseDescriptor">
            <summary>
            The descriptor from a license.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseDescriptor.Id">
            <summary>
            The license id
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.LicenseDescriptor.DescriptorItems">
            <summary>
            The descriptors in the license
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.PreLicenseFormat">
            <summary>
            Defines the prelicense format
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.PreLicenseFormat.Xml">
            <summary>
            Xml format
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.PreLicenseFormat.Json">
            <summary>
            Json format
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.ProtectionCommonSettings">
            <summary>
            Common settings to use for protections
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionCommonSettings.ApplicationScenarioId">
            <summary>
            Application Scenario Id
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.ProtectionEngineSettings">
            <summary>
            Settings used by <c>IProtectionEngine</c> during its creation and throughout its lifetime.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.AuthDelegate">
            <summary>
            The auth delegate used for acquiring authentication tokens
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.EngineId">
            <summary>
            The engine Id
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.Identity">
            <summary>
            The identity
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.ClientData">
            <summary>
            The engine client data
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.Locale">
            <summary>
            The engine locale
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.CustomSettings">
            <summary>
            A list of name/value pairs used for testing and experimentation.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.SessionId">
            <summary>
            The engine session id.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.Cloud">
            <summary>
            Sets the cloud. If not specified, then it will be determined by DNS lookup of the engine's
            identity domain if possible, else fall back to commercial cloud.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.CloudEndpointBaseUrl">
            <summary>
            Sets the cloud endpoint base url, used to specify cloud boundary (e.g. "api.aadrm.com"). This
            value will only be read and must be set for Cloud = Custom.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.UnderlyingApplicationId">
            <summary>
            Sets the underlying application ID, used to when using the identity of the caller but
            acting for an underlying application
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.AllowCloudServiceOnly">
            <summary>
            Sets whether or not only cloud service is allowed
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.LoggerContext">
            <summary>
            Logger context that will be opaquely passed to the logger delegate for logs associated with the created engine
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.ProtectionEngineSettings.#ctor(System.String,Microsoft.InformationProtection.IAuthDelegate,System.String,System.String)">
            <summary>
            Creates an instance with the given parameters.
            </summary>
            <param name="engineId">Set it to the unique engine id generated by AddEngineAsync.</param>
            <param name="authDelegate">The AuthDelegate</param>
            <param name="clientData"></param>
            <param name="locale"></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.ProtectionProfileSettings">
            <summary>
            Settings used by <c>IProtectionProfile</c> during its creation and throughout its lifetime.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.MipContext">
            <summary>
            Global MIP context state
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.CacheStorageType">
            <summary>
            Storage Type to use - whether or not state should be stored on disk.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.ConsentDelegate">
            <summary>
            The consent delegate used to connect to external URLs
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.CanCacheLicenses">
            <summary>
            Configures whether or not end user licenses (EULs) will be cached locally
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.LoggerContext">
            <summary>
            Logger context that will be opaquely passed to the logger delegate for logs associated with the created profile
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.RedirectionUris">
            <summary>
            Redirection urls to use
            </summary>
            <remarks>
            Use this functionality to provide a domain that should be redirected to another Uri
            The originalUri will be normalized before comparison with the domain for the current request
            If the domain of the current request matches that of the originalUri then the redirectUri will be used instead
            This redirection will occur before DNS lookup redirection
            </remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.#ctor(Microsoft.InformationProtection.MipContext,Microsoft.InformationProtection.CacheStorageType,Microsoft.InformationProtection.IConsentDelegate)">
            <summary>
            ProtectionProfileSettings constructor
            </summary>
            <param name="mipContext">The <see cref="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.MipContext"/></param>
            <param name="cacheStorageType">The <see cref="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.CacheStorageType"/></param>
            <param name="consentDelegate">The <see cref="P:Microsoft.InformationProtection.Protection.ProtectionProfileSettings.ConsentDelegate"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.PublishingLicenseInfo">
            <summary>
            Holds the details of a Publishing License used to create a <c>IProtectionHandler</c>.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPublishingLicense">
            <summary>
            Serialized publishing license
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.Domains">
            <summary>
            Domains
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.ServerPublicCertificate">
            <summary>
            ServerPublicCertificate
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.IssuerId">
            <summary>
            IssuerId
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPreLicense">
            <summary>
            Serialized Prelicense
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.ContentId">
            <summary>
            ContentId
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.Owner">
            <summary>
            The owner
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.ConnectionInfo">
            <summary>
            The connection info
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.Descriptor">
            <summary>
            The descriptor
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.ReferralInfoUrl">
            <summary>
            The referral info url
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SignedApplicationData">
            <summary>
            The signed app data
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.IssuedTime">
            <summary>
            The issued time
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.GetPublishingLicenseInfo(System.Collections.Generic.List{System.Byte})">
            <summary>
            PublishingLicenseInfo constructor
            </summary>
            <param name="serializedPublishingLicense">The <see cref="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPublishingLicense"/></param>
            <returns>
            The PublishingLicenseInfo
            </returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.GetPublishingLicenseInfo(System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte})">
            <summary>
            PublishingLicenseInfo constructor
            </summary>
            <param name="serializedPublishingLicense">The <see cref="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPublishingLicense"/></param>
            <param name="serializedPreLicense">The <see cref="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPreLicense"/></param>
            <returns>
            The PublishingLicenseInfo
            </returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.GetPublishingLicenseInfo(System.Collections.Generic.List{System.Byte},Microsoft.InformationProtection.MipContext)">
            <summary>
            PublishingLicenseInfo constructor
            </summary>
            <param name="serializedPublishingLicense">The <see cref="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPublishingLicense"/></param>
            <param name="mipContext">The global MIP context</param>
            <returns>
            The PublishingLicenseInfo
            </returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.GetPublishingLicenseInfo(System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte},Microsoft.InformationProtection.MipContext)">
            <summary>
            PublishingLicenseInfo constructor
            </summary>
            <param name="serializedPublishingLicense">The <see cref="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPublishingLicense"/></param>
            <param name="serializedPreLicense">The <see cref="P:Microsoft.InformationProtection.Protection.PublishingLicenseInfo.SerializedPreLicense"/></param>
            <param name="mipContext">The global MIP context</param>
            <returns>
            The PublishingLicenseInfo
            </returns>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.PublishingSettings">
            <summary>
            Settings used to create a <c>IProtectionHandler</c> to protect new content.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.ProtectionDescriptor">
            <summary>
            The protection details
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.IsAuditedExtractionAllowed">
            <summary>
            Whether or not non-MIP-aware applications are allowed to open protected content
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.IsDeprecatedAlgorithmPreferred">
            <summary>
            Whether or not deprecated crypto algorithm (ECB) is preferred for backwards compatibility
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.DelegatedUserEmail">
            <summary>
            The delegation email
            </summary>
            <remarks>
            delegated user is specified when the authenticating user/application is acting on behalf of another user
            </remarks>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.PublishingFormatJson">
            <summary>
            Whether or not the returned pl is in json format (xml format is more widely accepted and is the default).
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.PreLicenseUserEmail">
            <summary>
            The user email to use for the prelicense
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.PublishingLicenseForRepublish">
            <summary>
            The serialized republishing license
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingSettings.PreLicenseRequest">
            <summary>
            The pre-license request. Setting this will cause the publishing request to include a pre-license
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.PublishingSettings.#ctor(Microsoft.InformationProtection.ProtectionDescriptor)">
            <summary>
            ProtectionPublishingSettings constructor
            </summary>
            <param name="protectionDescriptor">The <see cref="P:Microsoft.InformationProtection.Protection.PublishingSettings.ProtectionDescriptor"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.PublishingUseLicenseRequest">
            <summary>
            Request for a use license in the publishing request
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.PublishingUseLicenseRequest.#ctor">
            <summary>
            Creates a PublishingUseLicenseRequest for the user in the token
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.PublishingUseLicenseRequest.#ctor(System.String)">
            <summary>
            Creates a PublishingUseLicenseRequest for the user in delegatedUserEmail
            <param name="delegatedUserEmail">Email of the user to obtain the use license for</param>
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.PublishingUseLicenseRequest.DelegatedUserEmail">
            <summary>
            Optional delegated user.  If this is not set then the prelicense is for the user in the token
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.Rights">
            <summary>
            Provides a list of standard rights
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Owner">
            <summary>
            'Owner' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.View">
            <summary>
            'View' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.AuditedExtract">
            <summary>
            'Audited extract' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Edit">
            <summary>
            'Edit' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Export">
            <summary>
            'Export' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Extract">
            <summary>
            'Extract' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Print">
            <summary>
            'Print' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Comment">
            <summary>
            'Comment' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Reply">
            <summary>
            'Reply' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.ReplyAll">
            <summary>
            'Reply All' right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Rights.Forward">
            <summary>
            'Forward' right
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.Rights.EmailRights">
            <summary>
            All rights relevant for email 
            </summary>
            <return>A list of rights</return>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.Rights.EditableDocumentRights">
            <summary>
            All rights relevant for editing documents 
            </summary>
            <return>A list of rights</return>
        </member>
        <member name="M:Microsoft.InformationProtection.Protection.Rights.CommonRights">
            <summary>
            All common rights
            </summary>
            <return>A list of rights</return>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.Roles">
            <summary>
            Provides a list of standard roles
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Roles.Viewer">
            <summary>
            'Viewer' role
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Roles.Reviewer">
            <summary>
            'reviewer' role
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Roles.Author">
            <summary>
            'Author' role
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Protection.Roles.CoOwner">
            <summary>
            'CoOwner' role
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Protection.TemplateDescriptor">
            <summary>
            A template descriptor object used for setting a template, and displaying template options.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.TemplateDescriptor.Id">
            <summary>
            Template ID
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.TemplateDescriptor.Name">
            <summary>
            Template name
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Protection.TemplateDescriptor.Description">
            <summary>
            Template description
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.ProtectionDescriptor">
            <summary>
            Represents ad-hoc protection associated with protected content
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.ProtectionDescriptor.#ctor(System.String)">
            <summary>
            Constructor for ProtectionDescriptor for Template
            </summary>
            <param name="templateId">protection template ID</param>
        </member>
        <member name="M:Microsoft.InformationProtection.ProtectionDescriptor.#ctor(System.Collections.Generic.List{Microsoft.InformationProtection.UserRights})">
            <summary>
            Constructor for ProtectionDescriptor for Adhoc
            </summary>
            <param name="userRights">Collection of users-to-rights mappings</param>
        </member>
        <member name="M:Microsoft.InformationProtection.ProtectionDescriptor.#ctor(System.Collections.Generic.List{Microsoft.InformationProtection.UserRoles})">
            <summary>
            Constructor for ProtectionDescriptor for Adhoc
            </summary>
            <param name="userRoles">Collection of users-to-roles mappings</param>
        </member>
        <member name="M:Microsoft.InformationProtection.ProtectionDescriptor.#ctor(Microsoft.InformationProtection.LicenseType,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.InformationProtection.UserRights})">
            <summary>
            Constructor for ProtectionDescriptor for Adhoc with license type
            </summary>
            <param name="licenseType">The license type to create this ProtectionDescriptor for</param>
            <param name="usersWithDefaultRights">Collection of users to add to the license with default rights for the specific type</param>
            <param name="additionalUsersAndRights">Additional rights to assign users</param>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.ProtectionType">
            <summary>
            The protection type
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.UserRoles">
            <summary>
            Collection of users-to-roles mappings
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.UserRights">
            <summary>
            Collection of users-to-rights mappings
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.TemplateId">
            <summary>
            The RMS template id for template protection, license id for adhoc protection, if any
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.Owner">
            <summary>
            The owner of protection
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.LabelId">
            <summary>
            Gets the Label id, if any
            This property will only be populated in ProtectionDescriptors for preexisting protected content. i.e. It is
            a field populated by the server at the moment protected content is consumed.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.ContentId">
            <summary>
            Gets the content id
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.Name">
            <summary>
            The protection name
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.Description">
            <summary>
            The protection description
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.AllowOfflineAccess">
            <summary>
            Whether or not protection allows offline content access (default = true)
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.Referrer">
            <summary>
            Protection referrer address
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.ContentValidUntil">
            <summary>
            Protection expiration time
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.EncryptedAppData">
            <summary>
            App-specific data that was encrypted
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.SignedAppData">
            <summary>
            App-specific data that was signed
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.DoubleKeyUrl">
            <summary>
            The double key url
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.ProtectionDescriptor.LicenseType">
            <summary>
            The license type if this instance was created with it
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.ProtectionType">
            <summary>
            Origin type of protection
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ProtectionType.TemplateBased">
            <summary>
            Protection was created from a template
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ProtectionType.Custom">
            <summary>
            Protection was created ad hoc
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.ServiceDisablementExtent">
            <summary>
            A description of the scope for which a service is disabled. (See ServiceDisabledException)
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ServiceDisablementExtent.User">
            <summary>
            Service is disabled for a particular user
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ServiceDisablementExtent.Device">
            <summary>
            Service is disabled for a particular device
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ServiceDisablementExtent.Platform">
            <summary>
            Service is disabled for a particular platform
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.ServiceDisablementExtent.Tenant">
            <summary>
            Service is disabled for a particular tenant
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.Action">
            <summary>
            Base type for an action.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.Action.#ctor(System.String,Microsoft.InformationProtection.Policy.Actions.ActionType)">
            <summary>
            Constructor for Action
            </summary>
            <param name="id">The id of the action</param>
            <param name="actionType">The action type</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.Action.Id">
            <summary>
            The id of the action
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.Action.ActionType">
            <summary>
            The type of derived action this base class can be cast to
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ActionType">
            <summary>
            Different action types.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.None">
            <summary>
            No action types. Used for testing
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.AddContentFooter">
            <summary>
            Add a content footer to the document action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.AddContentHeader">
            <summary>
            Add a content header to the document action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.AddWatermark">
            <summary>
            Add a water mark to the entire document action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.Custom">
            <summary>
            A custom defined action type.
            </summary>
            <remarks>Custom is the generic action type. Every other action type is a specific action with a specific meaning.</remarks>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.Justify">
            <summary>
            A justify action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.Metadata">
            <summary>
            A Meta data change action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.ProtectAdhoc">
            <summary>
            A protect by adhoc policy action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.ProtectByTemplate">
            <summary>
            A protect by template action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.ProtectDoNotForward">
            <summary>
             A protect by do not forward action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.RemoveContentFooter">
            <summary>
            Remove content footer action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.RemoveContentHeader">
            <summary>
            Remove content header action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.RemoveProtection">
            <summary>
            Remove protection action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.RemoveWatermark">
            <summary>
            Remove watermarking action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.ApplyLabel">
            <summary>
            Apply label action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.RecommendLabel">
            <summary>
            Recommend label action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.ProtectAdhocDoubleKey">
            <summary>
            A protect by double key adhoc policy action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.ProtectDoNotForwardDoubleKey">
            <summary>
            A protect by double key do not forward action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.ProtectByEncryptOnly">
            <summary>
            A protect by encrypt only action type.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.Actions.ActionType.All">
            <summary>
            All possible action types. Used for testing
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction">
            <summary>
            An action class which specifies adding a content footer to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,Microsoft.InformationProtection.Policy.ContentMarkAlignment,System.Int32)">
            <summary>
            Creates a new AddContentFooterAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.Action.Id"/></param>
            <param name="uiElementName">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.UIElementName"/></param>
            <param name="text">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.Text"/></param>
            <param name="fontName">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.FontName"/></param>
            <param name="fontSize">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.FontSize"/></param>
            <param name="fontColor">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.FontColor"/></param>
            <param name="alignment">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.Alignment"/></param>
            <param name="margin">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.Margin"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.UIElementName">
            <summary>
            An API used to mark the content footer element. This should be the name that should be used for the UI element that holds the content footer.
            </summary>
            <remarks>The same name will be returned in <see cref="T:Microsoft.InformationProtection.Policy.Actions.RemoveContentFooterAction"/> in case the content footer needs to be removed.</remarks>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.Text">
            <summary>
            The text that's meant to go into the content footer.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.FontName">
            <summary>
             The font name, used to display the content footer, default value if not set by policy Calibri.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.FontSize">
            <summary>
            The font size, used to display the content footer.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.FontColor">
            <summary>
            The font color, used to display the content footer, as a string (e.g."#000000").
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.Alignment">
            <summary>
            the <see cref="T:Microsoft.InformationProtection.Policy.ContentMarkAlignment"/> of the footer.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentFooterAction.Margin">
            <summary>
            The margin of the footer from the bottom of the document.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction">
            <summary>
            An action class which specifies adding a content header to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,Microsoft.InformationProtection.Policy.ContentMarkAlignment,System.Int32)">
            <summary>
            Creates a new AddContentHeaderAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="uiElementName">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.UIElementName"/></param>
            <param name="text">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.Text"/></param>
            <param name="fontName">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.FontName"/></param>
            <param name="fontSize">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.FontSize"/></param>
            <param name="fontColor">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.FontColor"/></param>
            <param name="alignment">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.Alignment"/></param>
            <param name="margin">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.Margin"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.UIElementName">
            <summary>
            An API used to mark the content header element. This should be the name that should be used for the UI element that holds the content header.
            </summary>
            <remarks>The same name will be returned in <see cref="T:Microsoft.InformationProtection.Policy.Actions.RemoveContentHeaderAction"/> in case the content header needs to be removed.</remarks>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.Text">
            <summary>
            The text that's meant to go into the content header.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.FontName">
            <summary>
             The font name, used to display the content header, default value if not set by policy Calibri.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.FontSize">
            <summary>
            The font size, used to display the content header.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.FontColor">
            <summary>
            The font color, used to display the content header, as a string (e.g."#000000").
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.Alignment">
            <summary>
            the <see cref="T:Microsoft.InformationProtection.Policy.ContentMarkAlignment"/> of the header.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddContentHeaderAction.Margin">
            <summary>
            The margin of the header from the top of the document.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction">
            <summary>
            An action class that specifies adding watermark.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.#ctor(System.String,System.String,Microsoft.InformationProtection.Policy.WatermarkLayout,System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates a new AddWatermarkAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="uiElementName">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.UIElementName"/></param>
            <param name="watermarkLayout">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.WatermarkLayout"/></param>
            <param name="text">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.Text"/></param>
            <param name="fontName">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.FontName"/></param>
            <param name="fontSize">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.FontSize"/></param>
            <param name="fontColor">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.FontColor"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.UIElementName">
            <summary>
            An API used to mark the watermark element. This should be the name that should be used for the UI element that holds the watermark.
            </summary>
            <remarks>The same name will be returned in <see cref="T:Microsoft.InformationProtection.Policy.Actions.RemoveWatermarkAction"/> in case the watermark needs to be removed.</remarks>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.WatermarkLayout">
            <summary>
            The watermark layout.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.Text">
            <summary>
            The text that's meant to go into the watermark.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.FontName">
            <summary>
             The font name, used to display the watermark, default value if not set by policy Calibri.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.FontSize">
            <summary>
            The font size, used to display the watermark.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.AddWatermarkAction.FontColor">
            <summary>
            The font color, used to display the watermark, as a string (e.g."#000000").
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ApplyLabelAction">
            <summary>
            ApplyLabel Action
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ApplyLabelAction.#ctor(System.String,Microsoft.InformationProtection.Label,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new ApplyLabelAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="label">Label to Apply automatically</param>
            <param name="classificationIds">List of matched classification IDs</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.ApplyLabelAction.Label">
            <summary>
            Label to Apply automatically
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.ApplyLabelAction.ClassificationIds">
            <summary>
            List of matched classification IDs
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.CustomAction">
            <summary>
            CustomAction is a generic action class that captures all the sub-properties of the action as a property bag.The caller is responsible to understand
            the meaning of the action.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.CustomAction.#ctor(System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates a new CustomAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="name">The name of the action</param>
            <param name="properties">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.CustomAction.Properties"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.CustomAction.Name">
            <summary>
            The name of the action 
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.CustomAction.Properties">
            <summary>
            The properties key value pair list 
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.JustifyAction">
            <summary>
            Justify Action requires providing a justification to a label downgrade and setting the response in the execution state.
            <seealso cref="M:Microsoft.InformationProtection.Policy.ExecutionState.IsDowngradeJustified(System.String@)"/>
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.JustifyAction.#ctor(System.String)">
            <summary>
            Creates a new JustifyAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.MetadataAction">
            <summary>
            An Action meant that specifies what meta data information should be added to the content. 
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.MetadataAction.#ctor(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.InformationProtection.Policy.MetadataEntry})">
            <summary>
            Creates a new MetadataAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="metadataToRemove">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.MetadataAction.MetadataToRemove"/></param>
            <param name="metadataToAdd">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.MetadataAction.MetadataToAdd"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.MetadataAction.MetadataToRemove">
            <summary>
            The list of names of meta-data that need to be removed from content.
            </summary>
            <remarks>Removing meta-data should be done before adding meta-data.</remarks>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.MetadataAction.MetadataToAdd">
            <summary>
            The list of metadata entries. The meta-data needs to be added to content meta-data.
            </summary>
            <remarks>Removing meta-data should be done before adding meta-data.</remarks>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ProtectAdhocAction">
            <summary>
            An action class which specifies adding adhoc protection to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ProtectAdhocAction.#ctor(System.String)">
            <summary>
            Creates a new ProtectAdhocAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ProtectAdhocDkAction">
            <summary>
            An action class which specifies adding adhoc protection to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ProtectAdhocDkAction.#ctor(System.String,System.String)">
            <summary>
            Creates a new ProtectAdhocDkAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="doubleKeyEncryptionUrl">The double key encryptionUrl</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.ProtectAdhocDkAction.DoubleKeyEncryptionUrl">
            <summary>
            The double key encryption url.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ProtectByEncryptOnlyAction">
            <summary>
            An action class which specifies adding encrypt only protection to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ProtectByEncryptOnlyAction.#ctor(System.String,System.String)">
            <summary>
            Creates a new ProtectByEncryptOnly
            </summary>
            <param name="id">The id of the action</param>
            <param name="templateId">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.ProtectByEncryptOnlyAction.TemplateId"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.ProtectByEncryptOnlyAction.TemplateId">
            <summary>
            The template id used to protect the document (comes from well-known guid in internals)
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction">
            <summary>
            An action class which specifies adding protection by template to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction.#ctor(System.String,System.String)">
            <summary>
            Creates a new ProtectByTemplateAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="templateId">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction.TemplateId"/></param>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new ProtectByTemplateAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="templateId">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction.TemplateId"/></param>
            <param name="doubleKeyUrl">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction.DoubleKeyUrl"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction.TemplateId">
            <summary>
            The template id used to protect the document
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.ProtectByTemplateAction.DoubleKeyUrl">
            <summary>
            The double key url, if it is a double key template.  Empty for single key
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ProtectDoNotForwardAction">
            <summary>
            An action class which specifies adding do not forward protection to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ProtectDoNotForwardAction.#ctor(System.String)">
            <summary>
            Creates a new ProtectDoNotForwardAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.ProtectDoNotForwardDkAction">
            <summary>
            An action class which specifies adding do not forward protection to the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.ProtectDoNotForwardDkAction.#ctor(System.String,System.String)">
            <summary>
            Creates a new ProtectDoNotForwardAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="doubleKeyEncryptionUrl">The double key encryptionUrl</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.ProtectDoNotForwardDkAction.DoubleKeyEncryptionUrl">
            <summary>
            The double key encryption url.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.RecommendLabelAction">
            <summary>
            RecommendLabel Action
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.RecommendLabelAction.#ctor(System.String,Microsoft.InformationProtection.Label,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new RecommendLabelAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="label">label to recommend</param>
            <param name="classificationIds">List of matched classification IDs</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.RecommendLabelAction.Label">
            <summary>
            Label to recommend
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.RecommendLabelAction.ClassificationIds">
            <summary>
            List of matched classification IDs
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.RemoveContentFooterAction">
            <summary>
            An action class which specifies removing the content footer from the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.RemoveContentFooterAction.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new RemoveContentFooterAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="uiElementNames">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.RemoveContentFooterAction.UIElementNames"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.RemoveContentFooterAction.UIElementNames">
            <summary>
            The list of names that should be used to find the UI elements that should be removed.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.RemoveContentHeaderAction">
            <summary>
            An action class which specifies removing the content header from the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.RemoveContentHeaderAction.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new RemoveContentHeaderAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="uiElementNames">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.RemoveContentHeaderAction.UIElementNames"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.RemoveContentHeaderAction.UIElementNames">
            <summary>
            The list of names that should be used to find the UI elements that should be removed.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.RemoveProtectionAction">
            <summary>
            An action class which specifies removing protection from the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.RemoveProtectionAction.#ctor(System.String)">
            <summary>
            Creates a new RemoveProtectionAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.Actions.RemoveWatermarkAction">
            <summary>
            An action class which specifies removing the watermarking from the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.Actions.RemoveWatermarkAction.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new RemoveWatermarkAction. This constructor is only public to allow using this class in code testing
            </summary>
            <param name="id">The id of the action</param>
            <param name="uiElementNames">The <see cref="P:Microsoft.InformationProtection.Policy.Actions.RemoveWatermarkAction.UIElementNames"/></param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.Actions.RemoveWatermarkAction.UIElementNames">
            <summary>
            The list of names that should be used to find the UI elements that should be removed.
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.ClassificationRequest">
            <summary>
            Classification request for running cycle on document.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationRequest.ClassificationId">
            <summary>
            Classification id.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationRequest.RulePackageId">
            <summary>
            Rule package id. 
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.ClassificationResult">
            <summary>
            Classification result for running cycle on document.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationResult.Id">
            <summary>
            Sensitive Type Id.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationResult.Name">
            <summary>
            Sensitive Type Name.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationResult.Count">
            <summary>
            Classification Unique count.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationResult.ConfidenceLevel">
            <summary>
            Classification confidence level.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationResult.SensitiveInformationDetections">
            <summary>
            Classification sensitive content.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.ClassificationResult.DetailedClassificationAttributes">
            <summary>
            Classifier matches at specific thresholds
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.ContentFormat">
            <summary>
            Provides a list of content formats
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.ContentFormat.File">
            <summary>
            'file' content format
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.ContentFormat.Email">
            <summary>
            'email' content format
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.ContentMarkAlignment">
            <summary>
             Alignment for content marks (content header or content footer).
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.ContentMarkAlignment.Left">
            <summary>
            Content marking is aligned to the left
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.ContentMarkAlignment.Right">
            <summary>
            Content marking is aligned to the right
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.ContentMarkAlignment.Center">
            <summary>
            Content marking is centered
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.ExecutionState">
            <summary>
            Abstract class for all the state needed to execute the engine.
            </summary>
            <remarks>
            Clients should only call the methods to obtain the state that is needed.
            Hence, for efficiency, clients may want tooverride this abstract class
            such that the corresponding state is computed dynamically instead of computing in advance.
            </remarks>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetNewLabel">
            <summary>
            The sensitivity label id that should be applied on the document.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetNewLabelAssignmentMethod">
            <summary>
            The new label's assignment method.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetNewLabelExtendedProperties">
            <summary>
            Label's extended properties.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetProtectionDescriptor">
            <summary>
            The rights management service protection descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetContentFormat">
            <summary>
            The content format.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetContentMetadataVersion">
            <summary>
            Gets the highest metadata version supported by the application for the tenant.
            If a file format supports multiple versions of metadata,
            this allows MIP to understand all metadata and report granular metadata changes on a per-version basis.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetDataState">
            <summary>
            The content state.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetContentIdentifier">
            <summary>
            The content description that describes the document.
            <example>For a file: [path\filename]</example>
            <example>for an email: [Subject:Sender]</example>
            This value is used by auditing as a human-readable description of the content
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetAuditMetadata">
            <summary>
            Return a dictionary of application specific audit key-value pairs. Registered Key:Value pairs
            Sender: Email Id for the sender
            Recipients: Represents a JSON array of recipients for an email 
            LastModifiedBy: Email Id for the user who last modified the content 
            LastModifiedDate: Date the content was last modified 
            </summary>
            <returns>A list of audit metadata</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetSupportedActions">
            <summary>
            a list of actions that the application supports, as a bitwise OR of all supported actions
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.IsDowngradeJustified(System.String@)">
            <summary>
            Implementation should pass whether or not justification to downgrade an existing label was given.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetContentMetadata(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Get the meta-data items from the content.
            </summary>
            <param name="names"></param>
            <param name="namePrefixes"></param>
            <returns>A list of Metadata entries representing the meta data applied to the content.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.ExecutionState.GetClassificationResults(System.Collections.Generic.List{Microsoft.InformationProtection.Policy.ClassificationRequest})">
            <summary>
            Return a map of classification results.
            </summary>
            <param name="classificationRequest">A list of classification id's</param>
            <returns>A list of classification result, null if no classification cycle executed.</returns>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.DetailedClassificationResult">
            <summary>
            Classification Results on a specifc confidence threshold
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.DetailedClassificationResult.ConfidenceLevel">
            <summary>
            The confidence threshold
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.DetailedClassificationResult.Count">
            <summary>
            The raw number of instances at that confidence and above
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.IPolicyEngine">
            <summary>
            This class provides an interface for all engine functions.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.Settings">
            <summary>
            Get the policy engine Settings. 
            </summary>
            <value>The policy engine Settings. </value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.SensitivityTypes">
            <summary>
            List the sensitivity types associated with the policy engine.
            </summary>
            <value>A list of sensitivity labels. empty if LoadSensitivityTypesEnabled was false</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.MoreInfoUrl">
            <summary>
            Provide a url for looking up more information regarding the policy/labels.
            </summary>
            <value>A url in string format.</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.PolicyFileId">
            <summary>
            Provide the policy file ID.
            </summary>
            <value>A string with the policy file ID</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.SensitivityTypesFileId">
            <summary>
            Provide the sensitivity types file ID.
            </summary>
            <value>A string with the sensitivity types file ID</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.LastPolicyFetchTime">
            <summary>
            Provide the time when the policy was last fetched.
            </summary>
            <value>The last policy fetch Time</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.TenantId">
            <summary>
            Gets tenant ID
            </summary>
            <value>Policy tenant ID</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.PolicyDataXml">
            <summary>
            Gets policy data XML which describes the settings, labels, and rules associated with this policy
            </summary>
            <value>Policy data XML</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.SensitivityTypesDataXml">
            <summary>
            Gets sensitivity types data XML which describes the sensitivity types associated with this policy
            </summary>
            <value>Sensitivity types data XML</value>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.CustomSettings">
            <summary>
             The custom policy settings. set by the tenant admin.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.ListSensitivityLabels(System.String[])">
            <summary>
            List the sensitivity labels associated with the policy engine.
            </summary>
            <param name="contentFormats">a string array representing the list of formats such as "file", "email" etc</param>
            <returns>A list of sensitivity labels according to the provided contentFormats.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.GetDefaultSensitivityLabel(System.String)">
            <summary>
            Gets the default sensitivity label. 
            </summary>
            <param name="contentFormat">a string representing the format such as "file", "email" etc</param>
            <returns>Default sensitivy label if exists according to the provided contentFormat, <c>null</c>if there is no default label set.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.IsLabelingRequired(System.String)">
            <summary>
            Checks whether or not the policy dictates that a document must be labeled.
            </summary>
            <param name="contentFormat">a string representing the format such as "file", "email" etc</param>
            <returns>True if labeling is mandatory according to the provided contentFormat, else false.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.IsDowngradeJustificationRequired">
            <summary>
            Checks whether or not the policy dictates a justification for downgrade operations is required.
            </summary>
            <returns>True if a justification for downgrade operations is required, else false.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.HasClassificationRules(System.String[])">
            <summary>
            Gets if the policy has automatic or recommendation rules.
            </summary>
            <param name="contentFormats">a string array representing the list of formats such as "file", "email" etc</param>
            <returns>True if the policy contains automatic or recommendation rules according to provided contentFormats, else false.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.HasWorkloadConsent(Microsoft.InformationProtection.Workload)">
            <summary>
            Checks workload consent
            </summary>
            <value>Checks if workload is consented, true if not specified</value>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.GetLabelById(System.String)">
            <summary>
            Gets the label according to the provided id.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.CreatePolicyHandler(System.Boolean)">
            <summary>
            Create a Policy Handler to execute policy related functions on a file's execution state
            <param name="isAuditDiscoveryEnabled">Bool to denote if audit discovery is enabled.</param>
            </summary>
            <returns> Policy Handler </returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyEngine.SendApplicationAuditEvent(System.String,System.String,System.String)">
            <summary>
            Logs an application specific event to the audit pipeline.
            </summary>
            <param name="level">a string representing the log level : Info/Error/Warning.</param>
            <param name="eventType">a string representing the type of event.</param>
            <param name="eventData">a string representing the data associated with the event.</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyEngine.WxpMetadataVersion">
            <summary>
            Gets the recommended WXP (Windows, Excel, Powerpoint) metadata version, currently 0 for old verion
            1 for co-authoring enabled version. 
            </summary>
            <value>unsigned int indecating what version of metadata the tenant supports for WXP files.</value>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.IPolicyHandler">
            <summary>
            This class provides an interface for all handler functions.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyHandler.ComputeActions(Microsoft.InformationProtection.Policy.ExecutionState)">
            <summary>
            Executes the rules in the engine based on the provided state and returns the list of actions to be executed.
            </summary>
            <param name="state">The current execution state of the content the rules are running on.</param>
            <returns>list of actions that should be applied on the content.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyHandler.GetSensitivityLabel(Microsoft.InformationProtection.Policy.ExecutionState)">
            <summary>
            Get the sensitivity label from existing content.
            </summary>
            <param name="state">Provides required information to retrieve the label.</param>
            <returns>A content label object that contains the sensitivity label as well as additional information,
            or return empty if non exists. </returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyHandler.NotifyCommittedActions(Microsoft.InformationProtection.Policy.ExecutionState)">
            <summary>
            Called once the computed actions have been applied, and the data committed to disk.
            </summary>
            <param name="state">The current execution state of the content after the actions have been committed.</param>
            <remarks>Fires an Audit event.</remarks>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.IPolicyProfile">
            <summary>
            PolicyProfile class is the root class for using the Microsoft Information Protection operations.
            <para>A typical application will only need one PolicyProfile but it can create multiple profiles if needed.</para>
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.IPolicyProfile.Settings">
            <summary>
            Get the settings set on the profile.
            </summary>
            <value>settings set on the profile.</value>
        </member>
        <member name="E:Microsoft.InformationProtection.Policy.IPolicyProfile.OnPolicyChanged">
            <summary>
            An event that is called whenever the underlying policy is changed.
            </summary>
            <remarks>To load the new policy it is necessary to call <see cref="M:Microsoft.InformationProtection.Policy.IPolicyProfile.AddEngineAsync(Microsoft.InformationProtection.Policy.PolicyEngineSettings)"/> again with the engine Id given by <see cref="P:Microsoft.InformationProtection.PolicyChangedEventArgs.EngineId"/></remarks>
        </member>
        <member name="E:Microsoft.InformationProtection.Policy.IPolicyProfile.OnAddingEngine">
            <summary>
            An event that is called prior to the creation of a new engine.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.AddEngineAsync(Microsoft.InformationProtection.Policy.PolicyEngineSettings)">
            <summary>
            Starts adding a new policy engine to the profile.
            </summary>
            <param name="settings">the settings object that specifies the engines parameters.</param>
            <returns>A task that represents the asynchronous add engine operation. The value of the <c>TResult</c> parameter contains the <c>IPolicyEngine</c>.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.AddEngine(Microsoft.InformationProtection.Policy.PolicyEngineSettings)">
            <summary>
            Starts adding a new policy engine to the profile.
            </summary>
            <param name="settings">the settings object that specifies the engines parameters.</param>
            <returns>Newly created PolicyEngine.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.DeleteEngineAsync(System.String)">
            <summary>
            Starts deleting the policy engine with the given id. All data for the given profile will be completely deleted.
            </summary>
            <param name="id">the unique engine id.</param>
            <returns>A task that represents the asynchronous delete engine operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.DeleteEngine(System.String)">
            <summary>
            Starts deleting the policy engine with the given id. All data for the given profile will be completely deleted.
            </summary>
            <param name="id">the unique engine id.</param>>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.ListEnginesAsync">
            <summary>
            Starts list engines operation.
            </summary>
            <returns>A task that represents the asynchronous list engines operation. The value of the <c>TResult</c> parameter contains the list of engine ids.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.ListEngines">
            <summary>
            Starts list engines operation.
            </summary>
            <returns>the list of engine ids.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.UnloadEngineAsync(System.String)">
            <summary>
            Starts unloading the policy engine with the given id.
            </summary>
            <param name="id">the unique engine id.</param>
            <returns>A task that represents the asynchronous unload engine operation.</returns>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.UnloadEngine(System.String)">
            <summary>
            Starts unloading the policy engine with the given id.
            </summary>
            <param name="id">the unique engine id.</param>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.IPolicyProfile.AcquireAuthToken(Microsoft.InformationProtection.Cloud,Microsoft.InformationProtection.IAuthDelegate)">
            <summary>
            Trigger an authentication callback
            </summary>
            <param name="cloud">Azure cloud.</param>
            <param name="authDelegate">Authentication callback that will be invoked.</param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.MetadataEntry">
            <summary>
            Abstraction for a single Microsoft Information Protection MetadataEntry.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.MetadataEntry.#ctor(System.String,System.String,Microsoft.InformationProtection.Policy.MetadataVersion)">
            <summary>
            Constructor for MetadataEntry
            </summary>
            <param name="key">Metadata key </param>
            <param name="value">Metadata value </param>
            <param name="version">Metadata version </param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.MetadataEntry.Key">
            <summary>
            The metadata key
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.MetadataEntry.Value">
            <summary>
            The metadata value
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.MetadataEntry.Version">
            <summary>
            The metadata version
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.MetadataVersion">
            <summary>
            Abstraction for a single Microsoft Information Protection MetadataVersion.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.MetadataVersion.#ctor(System.UInt32,Microsoft.InformationProtection.Policy.MetadataVersionFormat)">
            <summary>
            MetadataVersion constructor
            </summary>
            <param name="version">Numerical version to use for metadata actions.</param>
            <param name="flags">Flags to specify how the version is used to calculate metadata actions.</param>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.MetadataVersion.Value">
            <summary>
            The numerical version
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.MetadataVersion.Flags">
            <summary>
            Flags that specify how the version is used
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.MetadataVersionFormat">
            <summary>
            Flags to specify how metadata versioning is processed
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.MetadataVersionFormat.DEFAULT">
            <summary>
            No special handling of metadata
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.MetadataVersionFormat.ONE_LABEL_PER_TENANT">
            <summary>
            Only allow one metadata entry per tenant
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.PolicyEngineSettings">
            <summary>
            An instance of this class with the appropriate parameters should be provide to initiate an engine. 
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.AuthDelegate">
            <summary>
            The auth delegate used for acquiring authentication tokens
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.LabelFilterDeprecated">
            <summary>
            Stores the value of the deprecated label filter (see FunctionalityFilterType property). Used internally for passing the value to native code
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.Id">
            <summary>
            The unique engine id.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.Identity">
            <summary>
            The identity
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.ClientData">
            <summary>
            The Client Data set in the settings.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.Locale">
            <summary>
            Get the Locale set in the settings.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.CustomSettings">
            <summary>
             The custom settings, used for feature gating and testing.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.SessionId">
            <summary>
            The session id, used for client defined telemetry. 
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.LoadSensitivityTypes">
            <summary>
            Indicates if should pull the sensitivity types with the policy.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.DelegatedUserEmail">
            <summary>
            Sets the delegated user
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.Cloud">
            <summary>
            Sets the cloud. If not set, cloud will default to commercial
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.CloudEndpointBaseUrl">
            <summary>
            Sets the base URL used by all service requests (e.g. "dataservice.protection.outlook.com"). This value will
            only be read and must be set for Cloud = Custom.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.LabelFilter">
            <summary>
             The label filter, used to filter labels on list sensitivity labels calls. If not set HyokProtection and 
             DoubleKeyProtection are filtered.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.ConfiguredFunctionality">
            <summary>
             Functionality that has been enabled (true), or disabled (false).  By default HyokProtection, DoubleKeyProtection, DoubleKeyUserDefinedProtection, 
             EncryptOnlyProtection, and MachineLearningClassifier are disabled
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.VariableTextMarking">
            <summary>
             The variable text marking type
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.LoggerContext">
            <summary>
            Logger context that will be opaquely passed to the logger delegate for logs associated with the created engine
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.PolicyEngineSettings.#ctor(System.String,Microsoft.InformationProtection.IAuthDelegate,System.String,System.String)">
            <summary>
            Construct an instance with the given parameters. Use this to create Settings to call LoadEngineAsync to load an existing engine.
            </summary>
            <param name="id">The <see cref="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.Id"/>. When loading an existing engine re-use the id else a new engine will be created.</param>
            <param name="authDelegate">The AuthDelegate</param>
            <param name="clientData">The <see cref="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.ClientData"/></param>
            <param name="locale">The <see cref="P:Microsoft.InformationProtection.Policy.PolicyEngineSettings.Locale"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.PolicyProfileSettings">
            <summary>
            Settings used by FileProfile during its creation and throughout its lifetime
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyProfileSettings.MipContext">
            <summary>
            Global MIP context state
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyProfileSettings.CacheStorageType">
            <summary>
            Storage Type to use - whether or not state should be stored on disk.
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyProfileSettings.SessionId">
            <summary>
            The session ID that will be used to correlate logs/telemetry
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.PolicyProfileSettings.LoggerContext">
            <summary>
            Logger context that will be opaquely passed to the logger delegate for logs associated with the created profile
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.PolicyProfileSettings.#ctor(Microsoft.InformationProtection.MipContext,Microsoft.InformationProtection.CacheStorageType)">
            <summary>
            Constructor for PolicyProfileSettings
            </summary>
            <param name="mipContext">The <see cref="P:Microsoft.InformationProtection.Policy.PolicyProfileSettings.MipContext"/></param>
            <param name="cacheStorageType">The <see cref="P:Microsoft.InformationProtection.Policy.PolicyProfileSettings.CacheStorageType"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.SensitivityTypesRulePackage">
            <summary>
            Sensitivity types rule package container class
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.SensitivityTypesRulePackage.RulePackageId">
            <summary>
            The rule package ID
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.Policy.SensitivityTypesRulePackage.RulePackage">
            <summary>
            The rule package
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.Policy.SensitivityTypesRulePackage.#ctor(System.String,System.String)">
            <summary>
            Constructor for SensitivityTypesRulePackage
            </summary>
            <param name="rulePackageId">The <see cref="P:Microsoft.InformationProtection.Policy.SensitivityTypesRulePackage.RulePackageId"/></param>
            <param name="rulePackage">The <see cref="P:Microsoft.InformationProtection.Policy.SensitivityTypesRulePackage.RulePackage"/></param>
        </member>
        <member name="T:Microsoft.InformationProtection.Policy.WatermarkLayout">
            <summary>
            Layout for watermarks.
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.WatermarkLayout.Horizontal">
            <summary>
            Watermark layout is horizontal
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Policy.WatermarkLayout.Diagonal">
            <summary>
             Watermark layout is diagonal
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.TelemetryEvent">
            <summary>
            The class representing MIP SDK telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.TelemetryEvent.#ctor(System.String,Microsoft.InformationProtection.EventLevel,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.InformationProtection.EventProperty})">
            <summary>
            Constructor for TelemetryEvent
            </summary>
            <param name="name">The email</param>
            <param name="level">The name</param>
            <param name="startTime">The name</param>
            <param name="properties">The name</param>
        </member>
        <member name="T:Microsoft.InformationProtection.UserRights">
            <summary>
            Represents a group of users and the rights associated with them
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.UserRights.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            UserRights constructor
            </summary>
            <param name="users">The <see cref="P:Microsoft.InformationProtection.UserRights.Users"/>. Group of users that share the same rights</param>
            <param name="rights">The <see cref="P:Microsoft.InformationProtection.UserRights.Rights"/>. Rights shared by group of users</param>
        </member>
        <member name="P:Microsoft.InformationProtection.UserRights.Users">
            <summary>
            The Users associated with a set of rights
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.UserRights.Rights">
            <summary>
            The rights associated with a group of users
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.UserRoles">
            <summary>
            Represents a group of users and the rights associated with them
            </summary>
        </member>
        <member name="M:Microsoft.InformationProtection.UserRoles.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            UserRoles constructor
            </summary>
            <param name="users">The <see cref="P:Microsoft.InformationProtection.UserRoles.Users"/>. Group of users that share the same roles</param>
            <param name="roles">The <see cref="P:Microsoft.InformationProtection.UserRoles.Roles"/>. Roles shared by group of users</param>
        </member>
        <member name="P:Microsoft.InformationProtection.UserRoles.Users">
            <summary>
            The Users associated with a set of roles
            </summary>
        </member>
        <member name="P:Microsoft.InformationProtection.UserRoles.Roles">
            <summary>
            The roles associated with a group of users
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.VariableTextMarkingType">
            <summary>
            Variable text marking type in the SDK
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.VariableTextMarkingType.Default">
            <summary>
            Known markings are converted unknown marking are removed
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.VariableTextMarkingType.PassThrough">
            <summary>
            Known markings are converted unknown marking are passed through
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.VariableTextMarkingType.None">
            <summary>
            All markings are passed through
            </summary>
        </member>
        <member name="T:Microsoft.InformationProtection.Workload">
            <summary>
            Different workloads
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Workload.Office">
            <summary>
            Office type workload
            </summary>
        </member>
        <member name="F:Microsoft.InformationProtection.Workload.Purview">
            <summary>
            Purview type workload
            </summary>
        </member>
    </members>
</doc>
